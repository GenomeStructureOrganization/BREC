\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<echo=F>>=

library(Brec)
library(plotly)
library(ggplot2)
library(reshape2)
library(shiny)
library(na.tools)
library(tidyverse)
library(xtable)
library(rlist)
library(gridExtra)
library(ggpubr)
library(patchwork)
library(grid)

plots_path =  paste0(getwd(),"/../DQC/new/")
## === Read data and build whole chromosomes from arms

# load inputs data
# inputData = read.csv(file = "data/Dmel_R6_formatted_v2.csv", header = T, sep = "\t")
inputData = read.csv(file = paste0(getwd(), "/../data/BREC_byArm_MB_marey_map_R5.36_removeOutliers.csv"), header = T, sep = "\t")
chrList = get_list_of_chromosomes(inputData)
newChrList = c("X", "2L", "2R", "3L", "3R")

#  --- display all chromosome features for paper-----
whole_genome_size_vect = c()
whole_genome_markers_density_vect = c()
genetic_map_length_vect = c()
for (chrID in newChrList){
    refChromosome = get_chromosome_from_inputData(inputData, chrID)
    chrSize = refChromosome$mb[nrow(refChromosome)] - refChromosome$mb[1]
    genetic_map_length = refChromosome$cm[nrow(refChromosome)] - refChromosome$cm[1]
    genetic_map_length_vect = c(genetic_map_length_vect, genetic_map_length)
    chr_markers_density = nrow(refChromosome)/chrSize
    print(c(chrID, "size", chrSize ,"markers nbr" ,nrow(refChromosome), "markers density" , round(chr_markers_density, 3) ))
    whole_genome_size_vect = c(whole_genome_size_vect,  chrSize)
    whole_genome_markers_density_vect = c(whole_genome_markers_density_vect, chr_markers_density)
}
whole_genome_markers_number = nrow(inputData)
whole_genome_markers_number
whole_genome_markers_density = round(mean(whole_genome_markers_density_vect), 2)
whole_genome_markers_density
whole_genome_size = round(sum(whole_genome_size_vect), 2)
whole_genome_genetic_map_length = round(sum(genetic_map_length_vect), 2)
genetic_map_length_vect
whole_genome_genetic_map_length
@


\section{Input data format}
<<echo=F>>=
options(xtable.floating = FALSE)
options(xtable.timestamp = "")

xtab <- xtable(rbind(head(inputData), tail(inputData)), caption = "A sample of the input csv data file for D. melanogaster R5")
print(xtab) #, latex.environments = "center"
@

\section{Validation}

\subsection{Chromatin boundaries validation table with min and max shift for each category : centromeric nad telomeric}
<<echo=F>>=

## R5 ref cyto boundaries
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
ref_c2L = 19.954780
ref_t2L = 0.698949
ref_c2R = 6.090470
ref_t2R = 20.020890
ref_c3L = 18.408033
ref_t3L = 0.356604
ref_c3R = 8.349278
ref_t3R = 27.248244
ref_cX = 20.665672
ref_tX = 2.460008

brec_c2L = 20.329802
brec_t2L = 0.677494
brec_c2R = 5.006569
brec_t2R = 20.712519
brec_c3L = 20.304835
brec_t3L = 2.264696
brec_c3R = 3.771587
brec_t3R = 25.636876
brec_cX = 20.103245
brec_tX = 0.923443

ref_centro = c(ref_cX, ref_c2L, ref_c2R, ref_c3L, ref_c3R)
ref_telo = c(ref_tX, ref_t2L, ref_t2R, ref_t3L, ref_t3R)
brec_centro = c(brec_cX, brec_c2L, brec_c2R, brec_c3L, brec_c3R)
brec_telo = c(brec_tX, brec_t2L, brec_t2R, brec_t3L, brec_t3R)

valid_centro = data.frame(ref_centro = ref_centro, BREC_centro = brec_centro)
valid_telo = data.frame(ref_telo = ref_telo, BREC_telo = brec_telo)

validation_df = data.frame(valid_centro, valid_telo, row.names = c("X" , "2L" , "2R" ,"3L" ,"3R"))
print(validation_df)
# addtorow <- list()
# addtorow$pos <- list(0, 0)
# addtorow$command <- c("&\\multicolumn{2}{c|}{Centromeric boundaries}&\\multicolumn{2}{c|}{Telomeric boundaries}\\\n" )

validation_tab <- xtable(validation_df, add.to.row = addtorow, include.colnames = FALSE, caption = "")

# add a row at the end of table with min and max shift values for each category of boundaries
shift_min_centro = min(abs(ref_centro-brec_centro))
shift_max_centro = max(abs(ref_centro-brec_centro))

shift_min_telo = min(abs(ref_telo-brec_telo))
shift_max_telo = max(abs(ref_telo-brec_telo))

# add a row at the end of table with mean and median shift values for each category of boundaries
shift_centro = round(abs(ref_centro-brec_centro), 2)
shift_mean_centro = mean(abs(ref_centro-brec_centro))
shift_median_centro = median(abs(ref_centro-brec_centro))

shift_telo = round(abs(ref_telo-brec_telo), 2)
shift_mean_telo = mean(abs(ref_telo-brec_telo))
shift_median_telo = median(abs(ref_telo-brec_telo))


# idem as before without 3R values---------------------------------
# add a row at the end of table with min and max shift values for each category of boundaries
shift_min_no_3R_centro = min(abs(ref_centro[-5] - brec_centro[-5]))
shift_max_no_3R_centro = max(abs(ref_centro[-5] - brec_centro[-5]))

shift_min_no_3R_telo = min(abs(ref_telo[-5] - brec_telo[-5]))
shift_max_no_3R_telo = max(abs(ref_telo[-5] - brec_telo[-5]))

shift_mean_no_3R_3L_centro = mean(abs(ref_centro[-c(4,5)] - brec_centro[-c(4,5)]))
shift_median_no_3R_centro = median(abs(ref_centro[-5] - brec_centro[-5]))

shift_mean_no_3R_3L_telo = mean(abs(ref_telo[-c(4,5)] - brec_telo[-c(4,5)]))
shift_median_no_3R_telo = median(abs(ref_telo[-5] - brec_telo[-5]))
# ---------------
shift_mean_no_3L_telo = mean(abs(ref_telo[-4] - brec_telo[-4]))
shift_median_no_3L_telo = median(abs(ref_telo[-4] - brec_telo[-4]))

# ------------------------------ reported in text content paper
mean(c(shift_mean_no_3R_3L_telo, shift_mean_no_3R_3L_centro)) == mean(c(abs(ref_centro[-c(4,5)]-brec_centro[-c(4,5)]), abs(ref_telo[-c(4,5)]-brec_telo[-c(4,5)])))

mean(c(shift_mean_telo, shift_mean_centro)) == mean(c(abs(ref_centro-brec_centro), abs(ref_telo-brec_telo)))

# -------------------------------

# addtorow <- list()
# addtorow$pos <- list(6, 0)
# addtorow$command <- c("&\\multicolumn{2}{c|}{Centromeric boundaries}&\\multicolumn{2}{c|}{Telomeric boundaries}\\\n" )

shift_df <- data.frame(shift_min_centro,shift_max_centro, shift_min_telo, shift_max_telo, row.names = c("Min. / Max. shift"))
# validation_tab <- xtable(validation_df, add.to.row = addtorow, include.colnames = FALSE)
print(shift_df)
print(validation_tab)

@

\subsection{PLOT: Chromatin boundaries validation plots for centromeric and telomeric on all Dmel R5 arms (corresponding to validation table)}
# <<echo=F>>=
# ((((((((((((((((((((((((((((((  main validation figure on 5 arms DmelR5  ))))))))))))))))))))))))))))))
fig5_gg_all_arms_list = list()
fig5_gg_all_arms_RR_list = list()

for (chrID in newChrList) {
  # RR_object = NULL
    ## R5_assign ref cyto boundaries according to chr in process
    if(chrID == "2L"){
        ref_c = 19.954780
        ref_t = 0.698949
    }else if(chrID == "2R"){
        ref_c = 6.090470
        ref_t = 20.020890
    }else if(chrID == "3L"){
        ref_c = 18.408033
        ref_t = 0.356604
    }else if(chrID == "3R"){
        ref_c = 8.349278
        ref_t = 27.248244
    }else if(chrID == "X"){
        ref_c =  20.665672
        ref_t =  2.460008
    }
    print(c("=========== chr in process ====> ", chrID, "==================="))
    refChromosome = get_chromosome_from_inputData(inputData, chrID)
    print(c("refChromosomeSize",nrow(refChromosome)))
    # cleaning step
    # refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR5", chrID) #=> chr2 : 240 instead of 267
    refChromosomeSize = nrow(refChromosome)
    print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

    #prepare refchr for DQC
    # refChromosomeAsMatrix = as.matrix.data.frame(subset(refChromosome, select=c("cm", "mb")), rownames.force = NA)

    # print(c("frac = ", frac, "n = ", nrow(testChromosome)))
    # ------------- simu1List : number of markers per chromosome ---------------------------------
    # enoughData = FALSE
    # simu1List = list()  # simulated chromosomes baesd on number of markers
    # simu1ListOfPvals = c()

    testChromosome = refChromosome

    # cleaning step----------------------------------------------------------------
    testChromosome = clean_chromosome_data(testChromosome, genomeName = "Dmel_R5", chrID) #=> 2L original = 110
    print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

    sizechr = testChromosome$mb[nrow(testChromosome)]

    # run BREC to get new HCB ------with span 0.15--------------------------------------------------------------
    spanVal = 0.15
    RR_object = estimate_recombination_rates_loess(testChromosome, spanVal)
    RR_object$regDr[RR_object$regDr<0]=0
    print("RR done")

    minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
    print(" get minRR done !")
    # print(minRR_object)

    # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object) # to prevent asking the user to decide (experimenting with Dmel)
    chrType_object = data.frame(chr_type = 0, chr_sub_type = "Telocentric")
    chrType = chrType_object$chr_type
    # print(chrType_object)

    R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
    print("R2 done")

    # if(using_slidingWindowApproach_for_HCB) {
    print("Extracting CB for this chromosome ...")
    heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
    print("extract centroCB done")
    telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
    print("extract telo CB done")
    RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
    print("extrapolation done")

    # ------------------------------------------------------------------
    # ------- with span 0.25 only for plotting
    spanVal_25 = 0.25
    RR_object_25 = estimate_recombination_rates_loess(testChromosome, spanVal_25)
    heteroChromatinBoundaries_25 = extract_CB(testChromosome, RR_object_25, R2DataFrame2D, chrID, chrType, minRR_object)
    telomeres_boundaries_25 = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
    RR_object_25 = extrapolate_RR_estimates(testChromosome, RR_object_25, heteroChromatinBoundaries_25, telomeres_boundaries_25, chrID, chrType, minRR_object)
    RR_object_25$regDr[RR_object_25$regDr<0] = 0

     # ------- with span 0.50 only for plotting
    spanVal_50 = 0.5
    RR_object_50 = estimate_recombination_rates_loess(testChromosome, spanVal_50)
    heteroChromatinBoundaries_50 = extract_CB(testChromosome, RR_object_50, R2DataFrame2D, chrID, chrType, minRR_object)
    telomeres_boundaries_50 = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
    RR_object_50 = extrapolate_RR_estimates(testChromosome, RR_object_50, heteroChromatinBoundaries_50, telomeres_boundaries_50, chrID, chrType, minRR_object)
    RR_object_50$regDr[RR_object_50$regDr<0] = 0

     # ------- with span 0.75 only for plotting
    spanVal_75 = 0.75
    RR_object_75 = estimate_recombination_rates_loess(testChromosome, spanVal_75)
    heteroChromatinBoundaries_75 = extract_CB(testChromosome, RR_object_75, R2DataFrame2D, chrID, chrType, minRR_object)
    telomeres_boundaries_75 = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
    RR_object_75 = extrapolate_RR_estimates(testChromosome, RR_object_75, heteroChromatinBoundaries_75, telomeres_boundaries_75, chrID, chrType, minRR_object)
    RR_object_75$regDr[RR_object_75$regDr<0] = 0

     # ------- with 3rd degree polynomial only for plotting
    RR_object_poly = estimate_recombination_rates_third_degree_polynomial(testChromosome)
    heteroChromatinBoundaries_poly = extract_CB(testChromosome, RR_object_poly, R2DataFrame2D, chrID, chrType, minRR_object)
    telomeres_boundaries_poly = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
    RR_object_poly = extrapolate_RR_estimates(testChromosome, RR_object_poly, heteroChromatinBoundaries_poly, telomeres_boundaries_poly, chrID, chrType, minRR_object)
    RR_object_poly$regDr[RR_object_poly$regDr<0] = 0
    # ------------------------------------------------------------------
    # shift values to add as plot annotation ----------------
    shift_centro = round(abs(heteroChromatinBoundaries$heteroBoundArm - ref_c), 2)
    shift_telo = round(abs(telomeres_boundaries$telo_arm - ref_t), 2)

    # adjust centromere vs. telomere sides as per chr arm (L or R)
    last_marker_pos = testChromosome$mb[nrow(testChromosome)] # needed for Highlighting HCB on pthe plot
    first_marker_pos = testChromosome$mb[1]

    if(telomeres_boundaries$telo_arm < heteroChromatinBoundaries$heteroBoundArm){
      # -------- telocentric -- left arm
      x0_arm_centro = min(heteroChromatinBoundaries$heteroBoundArm, last_marker_pos)
      x1_arm_centro = max(heteroChromatinBoundaries$heteroBoundArm, last_marker_pos)
      x0_arm_telo = min(telomeres_boundaries$telo_arm, first_marker_pos)
      x1_arm_telo = max(telomeres_boundaries$telo_arm, first_marker_pos)

      yaxisLim0 = 0
      yaxisLim1 = 65
      annotate_y = 64
      annotate_x = 5

      x0_arm_centro_ref = min(ref_c, last_marker_pos)
      x1_arm_centro_ref = max(ref_c, last_marker_pos)
      x0_arm_telo_ref = min(ref_t, first_marker_pos)
      x1_arm_telo_ref = max(ref_t, first_marker_pos)

      rect_centro_ymin = 50
      rect_centro_ymax = 70
      rect_telo_ymin = -15
      rect_telo_ymax = 15
      rect_centro_ref_ymin = 55
      rect_centro_ref_ymax = 65
      rect_telo_ref_ymin = -10
      rect_telo_ref_ymax = 10

    }else{
      # -------- telocentric -- right arm
      x0_arm_centro = min(heteroChromatinBoundaries$heteroBoundArm, first_marker_pos)
      x1_arm_centro = max(heteroChromatinBoundaries$heteroBoundArm, first_marker_pos)
      x0_arm_telo = min(telomeres_boundaries$telo_arm, last_marker_pos)
      x1_arm_telo = max(telomeres_boundaries$telo_arm, last_marker_pos)

      yaxisLim0 = 45
      yaxisLim1 = 110
      annotate_y = 109
      annotate_x = 7#13

      x0_arm_centro_ref = min(ref_c, first_marker_pos)
      x1_arm_centro_ref = max(ref_c, first_marker_pos)
      x0_arm_telo_ref = min(ref_t, last_marker_pos)
      x1_arm_telo_ref = max(ref_t, last_marker_pos)

      rect_centro_ymin = 45
      rect_centro_ymax = 65
      rect_telo_ymin = 115
      rect_telo_ymax = 100
      rect_centro_ref_ymin = 50
      rect_centro_ref_ymax = 60
      rect_telo_ref_ymin = 110
      rect_telo_ref_ymax = 105

    }

    # plotting -- old version with vlines as chromatin boundaries--------------------------------
    # gg_fig5 <- ggplot(testChromosome, aes(x=mb, y = cm)) + geom_point(size=0.5, color="black") +#Genetic markers
    #
    # geom_vline(xintercept = ref_c, linetype="solid", size=1, color="blue") +  # , color = "Reference"  aes(linetype=variable)+
    # # geom_text(mapping=aes(x=c, y=0, label="Reference centromeric"), size=4, angle=90, vjust=-1, hjust=-1) +
    # geom_vline(xintercept = ref_t, linetype="solid", size=1 , color="blue") + #aes(linetype=variable)
    # # geom_text(mapping=aes(x=t, y=0, label= "Reference telomeric"), size=4, angle=90, vjust=-1, hjust=-1) +
    # geom_vline(xintercept = heteroChromatinBoundaries$heteroBoundArm, linetype="dashed", size=1, color ="red") + # , color= "BREC_centromeric" #aes(linetype=variable)+
    # # geom_text(mapping=aes(x=heteroChromatinBoundaries$heteroBoundArm, y=0, label="BREC centromeric"), size=4, angle=90, vjust=-1, hjust=-3) +
    # geom_vline(xintercept = telomeres_boundaries$telo_arm, linetype="dashed", size=1 , color="grey40") + #color = "BREC_telomeric")
    # # geom_text(mapping=aes(x=telomeres_boundaries$telo_arm, y=0, label="BREC telomeric"), size=4, angle=90, vjust=-1, hjust=-3) +
    # # scale_color_manual(name = "Chromatin boundary", values = c(Reference = "blue", BREC_telomeric= "grey40", BREC_centromeric= "red"))+
    # labs(x = "Physical distance (Mb)", y = "Genetic distance (cM)", color="Chromatin boundaries")
    #
    # highlight_rect_centro <- data.frame(xmin=x0_arm_centro, xmax=x1_arm_centro, ymin=-Inf, ymax=Inf)
    # gg_fig5 <- gg_fig5 + geom_rect(data=highlight_rect_centro, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
    #           fill="coral1",
    #           alpha=0.3,
    #           inherit.aes = FALSE)
    #
    # highlight_rect_telo <- data.frame(xmin=x0_arm_telo, xmax=x1_arm_telo, ymin=-Inf, ymax=Inf)
    # gg_fig5 <- gg_fig5 + geom_rect(data=highlight_rect_telo, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
    #           fill="grey40",
    #           alpha=0.3,
    #           inherit.aes = FALSE)
    #
    # gg_fig5 <- gg_fig5 + theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold")
    #           # , legend.box.margin = margin(r = 2, l = 1, unit='cm')
    #           ,axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))
    #     # scale_x_continuous(breaks=seq(0,24,2)) +
    #     # scale_y_continuous(breaks=seq(0,20,2))
    # # ,"\n", deca_c, "\n", deca_t
    #
    # gg_fig5 <-  gg_fig5 + annotate("label", x = annotate_x, y = annotate_y, label = chrID, color = "black", size = 4, fill = "white")+
    #   annotate("label", x = annotate_x, y = annotate_y, label = paste("\n\n", "shift centro =",shift_centro), color = "red", size = 4, fill = "white") +
    #   annotate("label", x = annotate_x, y = annotate_y, label = paste("\n\n\n\n", "shift telo = ", shift_telo), color = "black", size = 4, fill = "white")+
    #   theme_bw()  # Black and white theme
    #
    # gg_fig5 <- gg_fig5 + coord_cartesian(ylim = c(yaxisLim0, yaxisLim1))
    #
    # gg_fig5_RR <- ggplot(x = testChromosome) +
    #   geom_line(aes(x = testChromosome$mb, y = RR_object$regDr), size=1, color="springgreen4") + labs(x=NULL, y = "Recombination rate (cM/Mb)") + annotate("label", x=5, y=3.5, label=paste(chrID, "\nspan =", spanVal), size = 3, fill = "white") +  theme_bw()
    #
    # # gg_fig5_both <- grid.arrange(gg_fig5_RR, gg_fig5, ncol = 1, heights = c(1, 2))
    # # ggsave(filename = paste0("span_", spanVal, "_chr_",chrID ,"_fig5.png"), plot = gg_fig5_both, path = plots_path, #device = "pdf",
    #         # width = 20, height = 30, units = "cm", dpi = 300)
    #-----------------------------------------------------------------------------------------------------------------------
    #--------new version with rect as chromatin boundaries----------------------------------------------------------------
    gg_fig5 <- ggplot(testChromosome, aes(x=mb, y = cm)) + geom_point(size=0.5, color="black") + geom_rug(alpha = 0.7, sides = "b", length = unit(0.05, "npc")) + scale_y_continuous(expand = c(0.1, 0.1)) +    #Genetic markers
      labs(x = "Physical distance (Mb)", y = "Genetic distance (cM)")

      # +++ rect BREC results
      highlight_rect_centro_5 <- data.frame(xmin=x0_arm_centro, xmax=x1_arm_centro, ymin=rect_centro_ymin, ymax=rect_centro_ymax)
      gg_fig15 <- gg_fig5 + geom_rect(data=highlight_rect_centro_5, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                color = "red", linetype = "dashed",  fill="coral1", alpha=0.5, inherit.aes = FALSE)

      highlight_rect_telo_5 <- data.frame(xmin=x0_arm_telo, xmax=x1_arm_telo, ymin=rect_telo_ymin, ymax=rect_telo_ymax)
      gg_fig5 <- gg_fig5 + geom_rect(data=highlight_rect_telo_5, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                color = "grey40", linetype = "dashed", fill="grey40", alpha=0.5, inherit.aes = FALSE)  #darkorchid

      # +++ rect Ref cyto
      highlight_rect_centro_5_ref <- data.frame(xmin=x0_arm_centro_ref, xmax=x1_arm_centro_ref, ymin=rect_centro_ref_ymin, ymax=rect_centro_ref_ymax)
      gg_fig5 <- gg_fig5 + geom_rect(data=highlight_rect_centro_5_ref, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                color = "blue", linetype = "solid", fill="blue", alpha=0.3, inherit.aes = FALSE)

      highlight_rect_telo_5_ref <- data.frame(xmin=x0_arm_telo_ref, xmax=x1_arm_telo_ref, ymin=rect_telo_ref_ymin, ymax=rect_telo_ref_ymax)
      gg_fig5 <- gg_fig15 + geom_rect(data=highlight_rect_telo_5_ref, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                color = "blue", linetype = "solid", fill="blue", alpha=0.3, inherit.aes = FALSE)
      # +++ legend
      gg_fig5 <- gg_fig5 + theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold")
            # , legend.box.margin = margin(r = 2, l = 1, unit='cm')
            ,axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))
      # scale_x_continuous(breaks=seq(0,24,2)) +
      # scale_y_continuous(breaks=seq(0,20,2))
      # ,"\n", deca_c, "\n", deca_t

      gg_fig5 <-  gg_fig5 + annotate("label", x = annotate_x, y = annotate_y, label = chrID, color = "black", size = 4, fill = "white")+
      annotate("label", x = annotate_x, y = annotate_y, label = paste("\n\n", "shift centro =",shift_centro), color = "red", size = 4, fill = "white") +
      annotate("label", x = annotate_x, y = annotate_y, label = paste("\n\n\n\n", "shift telo = ", shift_telo), color = "black", size = 4, fill = "white")+
      theme_bw()  # Black and white theme

      gg_fig5 <- gg_fig5 + coord_cartesian(ylim = c(yaxisLim0, yaxisLim1))

      RR_object_to_plot = data.frame(mb = testChromosome$mb, Loess_span_15 = RR_object$regDr, Loess_span_25 = RR_object_25$regDr, Loess_span_50 = RR_object_50$regDr, Loess_span_75 = RR_object_75$regDr, Polynomial = RR_object_poly$regDr)

      gg_fig5_RR <- RR_object_to_plot %>%
      gather(key=Model,value, Loess_span_15, Loess_span_25, Loess_span_50, Loess_span_75, Polynomial) %>%
      ggplot(aes(x=mb, y=value, colour=Model)) +
      geom_line(size=1) +
      # gg_fig5_RR <- ggplot(data = RR_object_to_plot) +
        # geom_line(aes(x = mb, y = RR_loess_15), size=1, color="springgreen4") +
        # geom_line(aes(y = RR_loess_25), size=1, color="darkorange1") +
      labs(x = "Physical distance (Mb)", y = "Recombination rate (cM/Mb)") +
      annotate("label", x=1.5, y=4.5, label=paste(chrID), size = 4, fill = "white") +
      theme_bw() + scale_y_continuous(breaks=seq(0,6,1))+
      theme(legend.position = "none")

    # ---------------------------------------------------------------------------------------------------------------------

    fig5_gg_all_arms_list = rlist::list.append(fig5_gg_all_arms_list, gg_fig5)
    fig5_gg_all_arms_RR_list = rlist::list.append(fig5_gg_all_arms_RR_list, gg_fig5_RR)
  }

  fig5_gg_X = fig5_gg_all_arms_list[[1]]
  fig5_gg_2L = fig5_gg_all_arms_list[[2]]
  fig5_gg_2R = fig5_gg_all_arms_list[[3]]
  fig5_gg_3L = fig5_gg_all_arms_list[[4]]
  fig5_gg_3R = fig5_gg_all_arms_list[[5]]

  fig5_gg_X_RR = fig5_gg_all_arms_RR_list[[1]]
  fig5_gg_2L_RR = fig5_gg_all_arms_RR_list[[2]]
  fig5_gg_2R_RR= fig5_gg_all_arms_RR_list[[3]]
  fig5_gg_3L_RR = fig5_gg_all_arms_RR_list[[4]]
  fig5_gg_3R_RR = fig5_gg_all_arms_RR_list[[5]]

  # all_in_one_gg_fig5 =  (fig5_gg_X_RR + plot_spacer())/ (fig5_gg_X + plot_spacer()) / (fig5_gg_2L_RR + fig5_gg_2R_RR) / (fig5_gg_2L + fig5_gg_2R) / (fig5_gg_3L_RR + fig5_gg_3R_RR) / (fig5_gg_3L + fig5_gg_3R) + plot_layout(guides = 'collect')

  all_in_one_gg_fig5 =  (fig5_gg_X + plot_spacer()) /  (fig5_gg_2L + fig5_gg_2R) / (fig5_gg_3L + fig5_gg_3R) +
    plot_layout(guides = 'collect')
  ggsave(filename = paste0("span_", spanVal*100, "_all_in_one_gg_fig5_MBE.png"), plot = all_in_one_gg_fig5, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)
  all_in_one_gg_fig5

  all_in_one_gg_fig5_RR =  (fig5_gg_X_RR + plot_spacer()) /  (fig5_gg_2L_RR + fig5_gg_2R_RR) / (fig5_gg_3L_RR + fig5_gg_3R_RR) +
    plot_layout(guides = 'collect')
  ggsave(filename = paste0("span_", spanVal*100,"_and_span_", spanVal_25*100, "_all_in_one_gg_fig5_RR_MBE.png"), plot = all_in_one_gg_fig5_RR, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)
  all_in_one_gg_fig5_RR

   # all_in_one_gg_fig13 =  fig13_gg_100 + fig13_gg_9 0 + fig13_gg_80 +fig13_gg_70 + fig13_gg_60 +fig13_gg_50 + fig13_gg_40 + fig13_gg_30  + guide_area() +
   #  # + # + plot_spacer()
   #  plot_layout(guides = 'collect')


@


\section{Validation of recombination rates with the high resolution map from FlyBase}
<<echo=F>>=

# -------Load and prepare Langley data (with plotting the content) -----------------------------
figFlyBase_gg_all_arms_list = list()

langleyData <- read.csv(file = paste0(getwd(), "/../datasets/Langley_TableS12.txt"), skip= 3, sep="\t", header=TRUE)
    # print(head(langleyData))

    langleyData_X = langleyData[ , c(1:4)]
    langleyData_2L = langleyData[ , c(6:9)]
    langleyData_2R = langleyData[ , c(11:14)]
    langleyData_3L = langleyData[ , c(16:19)]
    langleyData_3R = langleyData[ , c(21:24)]

    newChrList = c("X", "2L", "2R", "3L", "3R")
    # newChrList = c("X") #, "3L"  only these 2 are working fpr now
    for (chrID in newChrList) {
      print(c("*********start chr", chrID))

        # chrID = "3R"
        if(chrID == "X"){
            langleyData = langleyData_X
        }else if(chrID == "2L"){
            langleyData = langleyData_2L
        }else if(chrID == "2R"){
            langleyData = langleyData_2R
        }else if(chrID == "3L"){
            langleyData = langleyData_3L
        }else if(chrID == "3R"){
            langleyData = langleyData_3R
        }
        names(langleyData)[c(1:4)] = c("Cytogenetic", "cM", "end", "M.bp")

  # ------- get refChromosome data from Langley ------------------------------------------------------------------
      langleyChromosome = langleyData[c(2, 3)]
      names(langleyChromosome) <- c("cm", "mb")
      langleyChromosome$mb = langleyChromosome$mb/10^6
      testChromosome = na.rm(langleyChromosome)

  # -------get BREC results for the same physical ma as Langley and with extrapolation----------------------------

      spanVal = 0.15
      RR_object = estimate_recombination_rates_loess(testChromosome, spanVal)
      # RR_object$regDr[RR_object$regDr<0]=0
      print("RR done")

      minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
      print(" get minRR done !")
      # print(minRR_object)

      # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object) # to prevent asking the user to decide (experimenting with Dmel)
      chrType_object = data.frame(chr_type = 0, chr_sub_type = "Telocentric")
      chrType = chrType_object$chr_type
      # print(chrType_object)

      R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
      print("R2 done")

      # if(using_slidingWindowApproach_for_HCB) {
      print("Extracting CB for this chromosome ...")
      heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
      print("extract centroCB done")
      telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
      print("extract telo CB done")
      RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
      print("extrapolation done")


      # ------------------plotting with ggplot ==> second y axis issues ==> solved with plotly -------------
      sizeArm = testChromosome$mb[nrow(testChromosome)]
      startArm = testChromosome$mb[1]

      if(chrID %in% c("X", "2L", "3L")){ # left arms
          rect_x_min_c = heteroChromatinBoundaries$heteroBoundArm
          rect_x_max_c = sizeArm
          rect_x_min_t = startArm
          rect_x_max_t = telomeres_boundaries$telo_arm
          xlabel = 17
          ylabel = 6
      }else{ # right arms
          rect_x_min_c = startArm
          rect_x_max_c = heteroChromatinBoundaries$heteroBoundArm
          rect_x_min_t = telomeres_boundaries$telo_arm
          rect_x_max_t = sizeArm
          xlabel = 5
          ylabel = 4
      }
      if(chrID == "X"){
          xlabel = 10
          ylabel = 0.5
      }

      RR_validation_to_plot = data.frame(mb = testChromosome$mb, FlyBase = langleyData$M.bp[1:nrow(testChromosome)]*10^8, BREC = RR_object$regDr)

      #-------- test de correlation
      corr_test_res <- cor.test(x = RR_validation_to_plot$FlyBase, y = RR_validation_to_plot$BREC, method = "spearman")
      corr_test_pval = corr_test_res$p.value
      print(chrID)
      print(corr_test_pval)
      corr_test_stat = round(corr_test_res$estimate, 2)

      # ----------------
      highlight_rect_centro_fig_FB = data.frame(xmin=rect_x_min_c, xmax=rect_x_max_c, ymin=-Inf, ymax=Inf)
      highlight_rect_telo_fig_FB = data.frame(xmin=rect_x_min_t, xmax=rect_x_max_t, ymin=-Inf, ymax=Inf)

      scale_y_max_breaks = ceiling(max(RR_validation_to_plot$FlyBase))
      p <- RR_validation_to_plot %>%
        gather(key=Recombination_map, value, FlyBase, BREC) %>%
        ggplot(aes(x = mb, y = value, color = Recombination_map)) +
        geom_line(size=1) +
        geom_rect(data=highlight_rect_centro_fig_FB, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="coral1", alpha=0.3, inherit.aes = FALSE) +
        geom_rect(data=highlight_rect_telo_fig_FB, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax), fill="grey40", alpha=0.3, inherit.aes = FALSE) +
        # annotate("label", x= 1, y= scale_y_max_breaks-2, label=paste(chrID), size = 4, fill = "white") +
        annotate("label", x= 12, y= scale_y_max_breaks+1.5, label=paste(chrID, "     Pvalue<<0.001     ", " rho=", corr_test_stat), size = 4, fill = "white") + #
          theme_bw() + scale_y_continuous(breaks=seq(0, 8, 1)) +
        # theme(legend.position = "none")
        scale_colour_manual(values = c("red", "blue")) + #springgreen4
        labs(x = "Physical distance (Mb)", y = "Recombination rate (cM/Mb)", colour = "Recombination map") +
        theme(legend.position = "none")
        # theme(legend.position = c(0.2, 0.9))
      print(p)

      ggsave(filename = paste0("chr_",chrID,"BREC_vs_Langley_as_FlyBase_span_15", ".png"), plot = p, path = plots_path, #device = "pdf",
              width = 20, height = 25, units = "cm", dpi = 300)


      figFlyBase_gg_all_arms_list = rlist::list.append(figFlyBase_gg_all_arms_list, p)
      print(c("*********end chr", chrID))
  }

  figFlyBase_gg_X_RR = figFlyBase_gg_all_arms_list[[1]]
  figFlyBase_gg_2L_RR = figFlyBase_gg_all_arms_list[[2]]
  figFlyBase_gg_2R_RR= figFlyBase_gg_all_arms_list[[3]]
  figFlyBase_gg_3L_RR = figFlyBase_gg_all_arms_list[[4]]
  figFlyBase_gg_3R_RR = figFlyBase_gg_all_arms_list[[5]]

  # all_in_one_gg_fig5 =  (fig5_gg_X_RR + plot_spacer())/ (fig5_gg_X + plot_spacer()) / (fig5_gg_2L_RR + fig5_gg_2R_RR) / (fig5_gg_2L + fig5_gg_2R) / (fig5_gg_3L_RR + fig5_gg_3R_RR) / (fig5_gg_3L + fig5_gg_3R) + plot_layout(guides = 'collect')

  figFlyBase_all_in_one_gg =  (figFlyBase_gg_X_RR + plot_spacer()) /  (figFlyBase_gg_2L_RR + figFlyBase_gg_2R_RR) / (figFlyBase_gg_3L_RR + figFlyBase_gg_3R_RR) +
    plot_layout(guides = 'collect')

  ggsave(filename = paste0("figFlyBase_all_in_one_gg_BREC_vs_Langley_as_FlyBase_span_15.png"), plot = figFlyBase_all_in_one_gg, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)
  figFlyBase_all_in_one_gg

@

\section{DQC}
\subsection{Density}
\subsubsection{DQC: density table for 2L and simulated chromosome}
<<echo=F>>=


## R5 ref cyto boundaries
options(xtable.floating = FALSE)
options(xtable.timestamp = "")

tab_fractions = seq(from=100 ,to=30, by=-10)

#------ table density per fraction for 2L DmelR5
chr_2L_size = 23
chromosome_length_2L = c(97, 87, 78, 68, 58, 48, 39, 29)
density_2L = chromosome_length_2L / chr_2L_size
density_df_2L = data.frame(Fraction = tab_fractions, Chromosome_length = chromosome_length_2L, Density = density_2L)
print(density_df_2L)
print(t(density_df_2L),digits = 3)
density_tab_2L <- xtable(t(density_df_2L), include.colnames = FALSE, include.rownames = FALSE)
print(density_tab_2L)

#------ table density per fraction for 2simu (from R6 I think?)
chr_2simu_size = 49
chromosome_length_2simu = c(240, 216, 192, 168, 144, 120, 96, 72)
density_2simu = chromosome_length_2simu / chr_2simu_size
density_df_2simu = data.frame(Fraction = tab_fractions, Chromosome_length = chromosome_length_2simu, Density = density_2simu)
print(density_df_2simu,digits = 3)
density_tab_2simu <- xtable(t(density_df_2simu), include.colnames = FALSE, include.rownames = FALSE)
print(density_tab_2simu)

@

\subsubsection{DQC: assessing the impact of decreasing markers density on the shift value (shift = ref_hcb - brec_hcb)}
\paragraph Simulation are conducted based on the 5 chromosomal arms of D. melanogaster R5 genome. For each, we simulated a new chromosome data with decresaing length
<<echo=F>>=
# ((((((((((((((((((((((((((((((((( main figure 30x  decreasing density simulations  )))))))))))))))))))))))))))))))))
densityList= list()
d_list_for_all_chr = list()

for (chrID in chrList) {

    ## R5_assign ref cyto boundaries according to chr in process
    if(chrID == "2L"){
        ref_c = 19.954780
        ref_t = 0.698949
    }else if(chrID == "2R"){
        ref_c = 6.090470
        ref_t = 20.020890
    }else if(chrID == "3L"){
        ref_c = 18.408033
        ref_t = 0.356604
    }else if(chrID == "3R"){
        ref_c = 8.349278
        ref_t = 27.248244
    }else if(chrID == "X"){
        ref_c =  20.665672
        ref_t =  2.460008
    }
    print(c("=========== chr in process ====> ", chrID, "==================="))
    refChromosome = get_chromosome_from_inputData(inputData, chrID)
    print(c("refChromosomeSize",nrow(refChromosome)))
    # cleaning step
    # refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR5", chrID) #=> chr2 : 240 instead of 267
    refChromosomeSize = nrow(refChromosome)
    print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

    #prepare refchr for DQC
    # refChromosomeAsMatrix = as.matrix.data.frame(subset(refChromosome, select=c("cm", "mb")), rownames.force = NA)

    # print(c("frac = ", frac, "n = ", nrow(testChromosome)))
    # ------------- simu1List : number of markers per chromosome ---------------------------------
    # enoughData = FALSE
    # simu1List = list()  # simulated chromosomes baesd on number of markers
    # simu1ListOfPvals = c()

  tictoc::tic()

    testChromosome = refChromosome
    deca_c = c() # centro decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    deca_t = c() # telo

    mkrDensity = c()
    densityFD = data.frame()

    testSizes = seq(1, 0.30, by = -0.05) # simulation fractions vector

    for(frac in testSizes) {#testSizes each 5%
        hcb_c = c()
        hcb_t = c()

        if (frac != 1) { ## not the case of 100%
            for (i in c(1:30)) {
                print(c("Test for : frac =", frac," No ", i, "  ---------------------------------"))
                testChromosome = dplyr::sample_frac(refChromosome, frac)
                testChromosome = testChromosome[order(testChromosome$mb),]  #sort by ascendaing mb which is always true (logically)

                # simu1List = rlist::list.append(simu1List, testChromosome)
                # chi2 = chisq.test(refChromosomeAsMatrix, p = testChromosome, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1
                # simu1ListOfPvals = c(simu1ListOfPvals, chi2$p.value)

                # gg1 = ggplot(data = testChromosome, mapping = aes(x=mb, y=cm)) + geom_point()
                # ggsave(filename = paste0("chr_",chrID, "_SimuChr-NbrMrks=", frac*100, "percent_testNo_",i,".png"), plot = gg1, path = plots_path,
                #        width = 3.5, height = 3, units = "in", dpi = 300)) #plot = last_plot()

                # run BREC to get new HCB
                RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.15)
                print("RR done")

                minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
                print(" get minRR done !")
                # print(minRR_object)

                # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object) # to prevent asking the user to decide (experimenting with Dmel)
                chrType_object = data.frame(chr_type = 0, chr_sub_type = "Telocentric")
                chrType = chrType_object$chr_type
                # print(chrType_object)

                R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
                print("R2 done")

                # if(using_slidingWindowApproach_for_HCB) {
                print("Extracting CB for this chromosome ...")
                heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
                print("extract centroCB done")
                telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
                print("extract telo CB done")
                RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
                print("extrapolation done")

                hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
                hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)
            }

        }else{ ## case of  100% --> run only once not 30 times since it's the same
            print("Test for : original_cleaned_chromosome ---------------------------------")
            # simu1List = rlist::list.append(simu1List, testChromosome)
            # chi2 = chisq.test(refChromosomeAsMatrix, p = testChromosome, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1
            # simu1ListOfPvals = c(simu1ListOfPvals, chi2$p.value)

            # gg2 = ggplot(data = testChromosome, mapping = aes(x=mb, y=cm)) + geom_point()
            # ggsave(filename = paste0("chr_",chrID, "_SimuChr-NbrMrks=", frac*100, "percent_original_cleaned_chromosome.png"), plot = gg2, path = plots_path,
            #        width = 3.5, height = 3, units = "in", dpi = 300)

            # run BREC to get new HCB
            RR_object = estimate_recombination_rates(testChromosome)
            print("RR done")

            RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.15)
            print("RR done")

            minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
            print(" get minRR done !")
            # print(minRR_object)

            # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object, RR_object) # to prevent asking the user to decide (experimenting with Dmel)
            chrType_object = data.frame(chr_type = 0, chr_sub_type = "Telocentric")
            chrType = chrType_object$chr_type
            # print(chrType_object)

            R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
            print("R2 done")

            # if(using_slidingWindowApproach_for_HCB) {
            print("Extracting CB for this chromosome ...")
            heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
            print("extract centroCB done")
            telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
            print("extract telo CB done")
            RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
            print("extrapolation done")

            hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
            hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)

            # # RR_plot_100pc = plot_all(testChromosome, RR_object, genomeName ="DmelR6_DQC1_SimuDmelR6Chr2_100pc", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, telomeres_boundaries, plots_path, chrType_object)
            #
            # # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
            # # print(RR_plot_100pc)
        }

        print(c("frac = ", frac, "n = ", nrow(testChromosome)))
        mkrDensity = c(mkrDensity, nrow(testChromosome))
        mhcb_c = mean(abs(ref_c - hcb_c))
        mhcb_t = mean(abs(ref_t - hcb_t))
        deca_c = c(deca_c, mhcb_c)
        deca_t = c(deca_t, mhcb_t)
    }

    # mkrDensity
    densityList = rlist::list.append(densityList, mkrDensity)

    # deca_c = abs(deca_c - ref_c)
    # deca_t = abs(deca_t - ref_t)

    fractions = testSizes*100
    # res = data.frame(fractions, telo_left = decatl, centro_left = decacl, centro_right = decacr, telo_right = decatr)
    res = data.frame(fractions, Telomeric = deca_t, Centromeric = deca_c) #, Chromosome = chrID)
    d <- melt(res, id="fractions")
    d_list_for_all_chr = rlist::list.append(d_list_for_all_chr, d)

}#end for
names(d_list_for_all_chr) <- chrList
d_list_for_all_chr$X
tictoc::toc()
# -------------------------------------------------------------------
# plotting in the same figure all chromosomes from d_list_for_all_chr
    ggX <- ggplot(d_list_for_all_chr$`X`, aes(x=fractions, y = value, color=variable)) +
        geom_line(aes(), size=1) +
        geom_point(aes(shape=variable ), size=4) +
        geom_segment(aes(x = Inf, xend = 65, y = 3, yend = 3), linetype="dashed", size=1, color="black") +
        geom_segment(aes(x = 65, xend =65, y = -Inf, yend = 3), linetype="dashed", size=1, color="black") +
        theme_bw() +
        scale_shape_manual(values= c(15,17)) + annotate("label", x = 70, y = 11, label = paste("X"), size = 3, fill = "white")+
        labs(x = "Decreasing fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary", shape = "Chromatin boundary") +
        theme(legend.position = "none") +
        # theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold"),
        #       legend.box.margin = margin(r = 2, l = 1, unit='cm'),
        #       axis.text.x = element_text(size=14), axis.text.y = element_text(size=14)) +
        scale_x_continuous(trans = "reverse", breaks=seq(100, 30,-10))+
        scale_y_continuous(breaks=seq(0,20,1))
    ggX
    ggsave(filename = paste0("chr_X",  "_SimuResuts_MBE.png"), plot = ggX, path = plots_path, #device = "pdf",
            width = 3.5, height = 3, units = "cm", dpi = 300)


    gg2L <- ggplot(d_list_for_all_chr$`2L`, aes(x=fractions, y = value, color=variable )) +
       geom_line(aes(), size=1) +
        geom_point(aes(shape=variable ), size=4) +
        geom_segment(aes(x = Inf, xend = 70, y = 3, yend = 3), linetype="dashed", size=1, color="black") +
        geom_segment(aes(x = 70, xend =70, y = -Inf, yend = 3), linetype="dashed", size=1, color="black") +
        theme_bw() +
        scale_shape_manual(values= c(15,17)) + annotate("label", x = 70, y = 5.5, label = paste("2L"), size = 3, fill = "white")+
        labs(x = "Decreasing fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary" , shape = "Chromatin boundary") +
        theme(legend.position = "none") +
        # theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold"),
        #       legend.box.margin = margin(r = 2, l = 1, unit='cm'),
        #       axis.text.x = element_text(size=14), axis.text.y = element_text(size=14)) +
        scale_x_continuous(trans = "reverse", breaks=seq(100, 30,-10))+
        scale_y_continuous(breaks=seq(0,20,1))
    gg2L
    ggsave(filename = paste0("chr_2L",  "_SimuResuts_MBE.png"), plot = gg2L, path = plots_path, #device = "pdf",
            width = 3.5, height = 3, units = "in", dpi = 300)

    gg2R <- ggplot(d_list_for_all_chr$`2R`, aes(x=fractions, y = value, color=variable )) +
        geom_line(aes(), size=1) +
        geom_point(aes(shape=variable ), size=4) +
        geom_segment(aes(x = Inf, xend = 35, y = 3, yend = 3), linetype="dashed", size=1, color="black") +
        geom_segment(aes(x = 35, xend =35, y = -Inf, yend = 3), linetype="dashed", size=1, color="black") +
        theme_bw() +
        scale_shape_manual(values= c(15,17)) + annotate("label", x = 70, y = 3.2, label = paste("2R"), size = 3, fill = "white")+
        labs(x = "Decreasing fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary", shape = "Chromatin boundary") +
        theme(legend.position = "none") +
        # theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold"),
        #       legend.box.margin = margin(r = 2, l = 1, unit='cm'),
        #       axis.text.x = element_text(size=14), axis.text.y = element_text(size=14)) +
        scale_x_continuous(trans = "reverse", breaks=seq(100, 30,-10))+
        scale_y_continuous(breaks=seq(0,20,1))
    gg2R
    ggsave(filename = paste0("chr_2R",  "_SimuResuts_MBE.png"), plot = gg2R, path = plots_path, #device = "pdf",
            width = 3.5, height = 3, units = "in", dpi = 300)

    gg3L <- ggplot(d_list_for_all_chr$`3L`, aes(x=fractions, y = value, color=variable )) +
        geom_line(aes(), size=1) +
        geom_point(aes(shape=variable ), size=4) +
        geom_segment(aes(x = Inf, xend = 80, y = 3, yend = 3), linetype="dashed", size=1, color="black") +
        geom_segment(aes(x = 80, xend = 80, y = -Inf, yend = 3), linetype="dashed", size=1, color="black") +
        theme_bw() +
        scale_shape_manual(values= c(15,17)) + annotate("label", x = 70, y = 6.5, label = paste("3L"), size = 3, fill = "white")+
        labs(x = "Decreasing fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary", shape = "Chromatin boundary") +
        theme(legend.position = "none") +
        # theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold"),
        #       legend.box.margin = margin(r = 2, l = 1, unit='cm'),
        #       axis.text.x = element_text(size=14), axis.text.y = element_text(size=14)) +
        scale_x_continuous(trans = "reverse", breaks=seq(100, 30,-10))+
        scale_y_continuous(breaks=seq(0,20,1))
    gg3L
    ggsave(filename = paste0("chr_3L",  "_SimuResuts_MBE.png"), plot = gg3L, path = plots_path, #device = "pdf",
            width = 3.5, height = 3, units = "in", dpi = 300)

    gg3R <- ggplot(d_list_for_all_chr$`3R`, aes(x=fractions, y = value, color=variable )) +
        geom_line(aes(), size=1) +
        geom_point(aes(shape=variable ), size=4) +
        geom_segment(aes(x = Inf, xend = 45, y = 3, yend = 3), linetype="dashed", size=1, color="black") +
        geom_segment(aes(x = 45, xend =45, y = -Inf, yend = 3), linetype="dashed", size=1, color="black") +
        theme_bw() +
        scale_shape_manual(values= c(15,17)) + annotate("label", x = 70, y = 4.6, label = paste("3R"), size = 3, fill = "white")+
        labs(x = "Decreasing fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary", shape = "Chromatin boundary") +
        theme(legend.position = "none") +
        # theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold"),
        #       legend.box.margin = margin(r = 2, l = 1, unit='cm'),
        #       axis.text.x = element_text(size=14), axis.text.y = element_text(size=14)) +
        scale_x_continuous(trans = "reverse", breaks=seq(100, 30,-10))+
        scale_y_continuous(breaks=seq(0,20,1))
    gg3R
    ggsave(filename = paste0("chr_3R",  "_SimuResuts_MBE.png"), plot = gg3R, path = plots_path, #device = "pdf",
            width = 3.5, height = 3, units = "in", dpi = 300)


    # all_in_one_gg = ggarrange(ggX, labels = "X",nrow = 2, hjust = -13, vjust = 3
    #             ,ggarrange(gg2L,gg2R,gg3L, gg3R , nrow = 2, ncol = 2
    #                   ,labels = c("2L", "2R", "3L", "3R"), hjust = -7, vjust = 3)
    # )

    all_in_one_gg = (ggX + plot_spacer()) / (gg2L + gg2R) / (gg3L + gg3R)+
    plot_layout(guides = 'collect')

    # all_in_one_gg = ggarrange(gg2L, labels = "X",nrow = 2, hjust = -13, vjust = 3
    #             ,ggarrange(gg2L,gg2L,gg2L, gg2L , nrow = 2, ncol = 2
    #                   ,labels = c("2L", "2R", "3L", "3R"), hjust = -7, vjust = 3)
    # )

    ggsave(filename = paste0("all_in_one",  "_SimuResuts_2_MBE.png"), plot = all_in_one_gg, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)
print(all_in_one_gg)

@


\subsection{Chromatin boundaries validation plot(ly)s}
<<echo=F>>=

# densityList= list()
# d_list_for_all_chr = list()
fig13_gg_per_fraction_list = list()


    ## R5_assign ref cyto boundaries for chr 2L in process
    chrID = "2L"

    ref_c = 19.954780
    ref_t = 0.698949
    print(c("=========== chr in process ====> ", chrID, "==================="))
    refChromosome = get_chromosome_from_inputData(inputData, chrID)
    print(c("refChromosomeSize",nrow(refChromosome)))

    refChromosomeSize = nrow(refChromosome)

    #prepare refchr for DQC
    # refChromosomeAsMatrix = as.matrix.data.frame(subset(refChromosome, select=c("cm", "mb")), rownames.force = NA)

    # print(c("frac = ", frac, "n = ", nrow(testChromosome)))
    # ------------- simu1List : number of markers per chromosome ---------------------------------
    # enoughData = FALSE
    # simu1List = list()  # simulated chromosomes baesd on number of markers
    # simu1ListOfPvals = c()

  tictoc::tic()

    # decacl = c() # centro_left decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    # decacr = c() # centro_right
    # decatl = c() # telo_left
    # decatr = c() # telo_right

    # deca_c = c() # centro decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    # deca_t = c() # telo
    #
    # hcb_c = c()
    # hcb_t = c()
    mkrDensity = c()

    testSizes = seq(1, 0.30, by = -0.1) # simulation fractions vector

    for(frac in testSizes) {#testSizes each 10%+
        # hcb_cl = c()
        # hcb_cr = c()
        # hcb_tl = c()
        # hcb_tr = c()

        testChromosome = refChromosome
        print(c("Test for : frac =", frac, "  ---------------------------------"))
        testChromosome = dplyr::sample_frac(refChromosome, frac)
        testChromosome = testChromosome[order(testChromosome$mb),]  #sort by ascendaing mb which is always true (logically)

        # simu1List = rlist::list.append(simu1List, testChromosome)
        # chi2 = chisq.test(refChromosomeAsMatrix, p = testChromosome, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1
        # simu1ListOfPvals = c(simu1ListOfPvals, chi2$p.value)

        # cleaning step----------------------------------------------------------------
        testChromosome = clean_chromosome_data(testChromosome, genomeName = "Dmel_R5", chrID) #=> 2L original = 110
        print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

        size2L = testChromosome$mb[nrow(testChromosome)]

        # run BREC to get new HCB -----------------------------------------------------
        RR_object = estimate_recombination_rates(testChromosome)
        print("RR done")

        RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.15)
        print("RR done")

        minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
        print(" get minRR done !")
        # print(minRR_object)

        # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object, RR_object) # to prevent asking the user to decide (experimenting with Dmel)
        chrType_object = data.frame(chr_type = 0, chr_sub_type = "Telocentric")
        chrType = chrType_object$chr_type
        # print(chrType_object)

        R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
        print("R2 done")

        # if(using_slidingWindowApproach_for_HCB) {
        print("Extracting CB for this chromosome ...")
        heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
        print("extract centroCB done")
        telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
        print("extract telo CB done")
        RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
        print("extrapolation done")

        # hcb_cl = c(hcb_cl, heteroChromatinBoundaries$heteroBoundLeft)
        # hcb_cr = c(hcb_cr, heteroChromatinBoundaries$heteroBoundRight)
        # hcb_tl = c(hcb_tl, telomeres_boundaries$extrapolPhysPos_left)
        # hcb_tr = c(hcb_tr, telomeres_boundaries$extrapolPhysPos_right)

        hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
        hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)

        # # RR_plot_100pc = plot_all(testChromosome, RR_object, genomeName ="DmelR6_DQC1_SimuDmelR6Chr2_100pc", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, telomeres_boundaries, plots_path, chrType_object)
        #
        # # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
        # # print(RR_plot_100pc)


        print(c("frac = ", frac, "n = ", nrow(testChromosome)))
        mkrDensity =  round(nrow(testChromosome) / size2L, 2)

        # deca_c = abs(deca_c - c)
        # deca_t = abs(deca_t - t)

        # plotting ----
        gg_fig13 <- ggplot(testChromosome, aes(x=mb, y = cm)) + geom_point(size=0.5, color="black") +#Genetic markers

        geom_vline(xintercept = ref_c, linetype="solid", size=1, color="blue") +  # , color = "Reference"  aes(linetype=variable)+
        # geom_text(mapping=aes(x=c, y=0, label="Reference centromeric"), size=4, angle=90, vjust=-1, hjust=-1) +
        geom_vline(xintercept = ref_t, linetype="solid", size=1 , color="blue") + #aes(linetype=variable)
        # geom_text(mapping=aes(x=t, y=0, label= "Reference telomeric"), size=4, angle=90, vjust=-1, hjust=-1) +
        geom_vline(xintercept = heteroChromatinBoundaries$heteroBoundArm, linetype="dashed", size=1, color ="red") + # , color= "BREC_centromeric" #aes(linetype=variable)+
        # geom_text(mapping=aes(x=heteroChromatinBoundaries$heteroBoundArm, y=0, label="BREC centromeric"), size=4, angle=90, vjust=-1, hjust=-3) +
        geom_vline(xintercept = telomeres_boundaries$telo_arm, linetype="dashed", size=1 , color="grey40") + #color = "BREC_telomeric")
        # geom_text(mapping=aes(x=telomeres_boundaries$telo_arm, y=0, label="BREC telomeric"), size=4, angle=90, vjust=-1, hjust=-3) +
        # scale_color_manual(name = "Chromatin boundary", values = c(Reference = "blue", BREC_telomeric= "grey40", BREC_centromeric= "red"))+
        labs(x = "Physical distance (Mb)", y = "Genetic distance (cM)")
        gg_fig13

        highlight_rect_centro <- data.frame(xmin=heteroChromatinBoundaries$heteroBoundArm, xmax=size2L, ymin=-Inf, ymax=Inf)
        gg_fig13 <- gg_fig13 + geom_rect(data=highlight_rect_centro, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                  fill="coral1",
                  alpha=0.3,
                  inherit.aes = FALSE)

        highlight_rect_telo <- data.frame(xmin=0, xmax=telomeres_boundaries$telo_arm, ymin=-Inf, ymax=Inf)
        gg_fig13 <- gg_fig13 + geom_rect(data=highlight_rect_telo, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                  fill="grey40",
                  alpha=0.3,
                  inherit.aes = FALSE)

        gg_fig13 <- gg_fig13 + theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold")
                  # , legend.box.margin = margin(r = 2, l = 1, unit='cm')
                  ,axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))
            # scale_x_continuous(breaks=seq(0,24,2)) +
            # scale_y_continuous(breaks=seq(0,20,2))
        # ,"\n", deca_c, "\n", deca_t

        gg_fig13 =  gg_fig13 + annotate("label", x = 12, y = 5, label = paste("fraction = ",frac*100, "%\n", "density = ",mkrDensity, "mkr/Mb" ), size = 3, fill = "white")+
          theme_bw()  # Black and white theme

        gg_fig13

        ggsave(filename = paste0("chr_",chrID ,"_frac_", frac*100,"_density_fig13_with_cleaning_MBE.png"), plot = gg_fig13, path = plots_path, #device = "pdf",
                width = 20, height = 30, units = "cm", dpi = 300)
        #---------

            fig13_gg_per_fraction_list = rlist::list.append(fig13_gg_per_fraction_list, gg_fig13)

    }

    # densityList = rlist::list.append(densityList, mkrDensity )

    # fractions = testSizes*100  #[1:10]
    # # res = data.frame(fractions, telo_left = decatl, centro_left = decacl, centro_right = decacr, telo_right = decatr)
    # res = data.frame(fractions, Telomeric = deca_t, Centromeric = deca_c) #, Chromosome = chrID)
    # d <- melt(res, id="fractions")
    # d_list_for_all_chr = rlist::list.append(d_list_for_all_chr, d)

# names(d_list_for_all_chr) <- "2L"#chrList
# d_list_for_all_chr$X
tictoc::toc()

# plotting in the same figure all chromosomes from d_list_for_all_chr
    # gg2L <- ggplot(d_list_for_all_chr$`2L`, aes(x=fractions, y = value, color=variable )) +
    #    geom_line(aes(), size=1) + #aes(linetype=variable)
    #     geom_point(aes(), size=4) +
    #     # scale_linetype_manual(values = c(2,1)) +
    #     # scale_shape_manual(values= c(15)) +
    #     labs(x = "Fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary") +
    #     theme(legend.position = "none",
    #     axis.text.x = element_text(size=14), axis.text.y = element_text(size=14) )+
    #     scale_x_continuous(breaks=seq(30,100,10)) +
    #     scale_y_continuous(breaks=seq(0,20,1))
    # gg2L
    # ggsave(filename = paste0("chr_2L",  "_SimuResuts.png"), plot = gg2L, path = plots_path,
    #         width = 3.5, height = 3, units = "in", dpi = 300)

    fig13_gg_100 = fig13_gg_per_fraction_list[[1]]
    fig13_gg_90 = fig13_gg_per_fraction_list[[2]]
    fig13_gg_80 = fig13_gg_per_fraction_list[[3]]
    fig13_gg_70 = fig13_gg_per_fraction_list[[4]]
    fig13_gg_60 = fig13_gg_per_fraction_list[[5]]
    fig13_gg_50 = fig13_gg_per_fraction_list[[6]]
    fig13_gg_40 = fig13_gg_per_fraction_list[[7]]
    fig13_gg_30 = fig13_gg_per_fraction_list[[8]]
    #
    # all_in_one_gg_fig13 = ggarrange(fig13_gg_100,fig13_gg_90,  nrow = 2, ncol = 2, hjust = -17, vjust = 3, labels = paste(c(testSizes[1:2]*100), "%"),
    #                                 ggarrange(fig13_gg_80, fig13_gg_70, fig13_gg_60,
    #                                           fig13_gg_50, fig13_gg_40, fig13_gg_30,
    #                                           nrow = 2 , ncol = 3# hjust = -13, vjust = 3
    #                   ,labels = paste(c(testSizes[-2]*100), "%"), hjust = -7, vjust = 3)
    #                   ,common.legend = T
    # )
    #
    # all_in_one_gg_fig13

    # fig13_gg_100 = fig13_gg_per_fraction_list[[1]] + theme(legend.position = "none")
    # fig13_gg_90 = fig13_gg_per_fraction_list[[2]] + theme(legend.position = "none")
    # fig13_gg_80 = fig13_gg_per_fraction_list[[3]] + theme(legend.position="none")
    # fig13_gg_70 = fig13_gg_per_fraction_list[[4]] + theme(legend.position="none")
    # fig13_gg_60 = fig13_gg_per_fraction_list[[5]] + theme(legend.position="none")
    # fig13_gg_50 = fig13_gg_per_fraction_list[[6]] + theme(legend.position="none")
    # fig13_gg_40 = fig13_gg_per_fraction_list[[7]] + theme(legend.position="none")
    # fig13_gg_30 = fig13_gg_per_fraction_list[[8]]

     all_in_one_gg_fig13 =  (fig13_gg_100 + fig13_gg_90) / (fig13_gg_80 +fig13_gg_70) / (fig13_gg_60 +fig13_gg_50) / (fig13_gg_40 + fig13_gg_30) +
    # + # + plot_spacer()
    plot_layout(guides = 'collect')

   # all_in_one_gg_fig13 =  fig13_gg_100 + fig13_gg_90 + fig13_gg_80 +fig13_gg_70 + fig13_gg_60 +fig13_gg_50 + fig13_gg_40 + fig13_gg_30  + guide_area() +
   #  # + # + plot_spacer()
   #  plot_layout(guides = 'collect')

   all_in_one_gg_fig13

    ggsave(filename = paste0("all_in_one_fig13_new_with_cleaning_MBE.png"), plot = all_in_one_gg_fig13, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)

    # --- other ways to plot all in one --------------------------------------------------
    # ggarrange(ggX,gg2L,gg2R,gg3L, gg3R , nrow = 3, ncol = 2
    #                   ,labels = c("X","2L", "2R", "3L", "3R"), hjust = -15, vjust = 3
    #                  # ,common.legend = T
    # )


    #  (fig13_gg_100 + fig13_gg_90  + guide_area()) / (fig13_gg_80 + fig13_gg_70 + fig13_gg_60) / (fig13_gg_50 + fig13_gg_40 + fig13_gg_30) +
    # # + # + plot_spacer()
    # plot_layout(guides = 'collect')
    # , labels = paste(c(testSizes*100), "%"), hjust = -7, vjust = 3) #+
         # plot_layout(ncol = 1)


    #--------------------------------------------------------------------------------------

@

\subsection{Chromatin boundaries validation plot(ly)s====> chr 2 simu per fraction}
<<echo=F>>=

# densityList= list()
# d_list_for_all_chr = list()
fig14_gg_per_fraction_list = list()


    ## R5_assign ref cyto boundaries for chr 2L in process
    chrID = "2"

    ref_c = 19.954780
    ref_t = 0.698949
    ref_c2 = 6.090470 + 22.87981 # 2R
    ref_t2 = 20.020890 + 22.87981

    print(c("=========== chr in process ====> ", chrID, "==================="))
    refChromosome_2L = get_chromosome_from_inputData(inputData, "2L")
    refChromosome_2R = get_chromosome_from_inputData(inputData, "2R")

    # from transform_inputData_to_chromosomes() ---------------------------------------
      lenghtOfFirstArm = 22.87981 # size(2L_R5)
      RightArm = refChromosome_2R
      LeftArm = refChromosome_2L
      # refChromosome = transform_2arms_to_chromosome(firstArm, secondArm, lenghtOfFirstArm) # merge both arms into one chr : remember coord normalisation

      RightArm$mb = RightArm$mb + lenghtOfFirstArm
      chromosome = rbind(LeftArm, RightArm)
      chromosome$chr = "2" # extract the chr number from it's string name

      refChromosome = chromosome

    print(c("refChromosomeSize",nrow(refChromosome)))

    # cleaning step
    # refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR5", chrID) #=> chr2 : 240 instead of 267
    refChromosomeSize = nrow(refChromosome)
    # print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

    #prepare refchr for DQC
    # refChromosomeAsMatrix = as.matrix.data.frame(subset(refChromosome, select=c("cm", "mb")), rownames.force = NA)

    # print(c("frac = ", frac, "n = ", nrow(testChromosome)))
    # ------------- simu1List : number of markers per chromosome ---------------------------------
    # enoughData = FALSE
    # simu1List = list()  # simulated chromosomes baesd on number of markers
    # simu1ListOfPvals = c()

  tictoc::tic()

    # decacl = c() # centro_left decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    # decacr = c() # centro_right
    # decatl = c() # telo_left
    # decatr = c() # telo_right

    # deca_c = c() # centro decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    # deca_t = c() # telo
    #
    # hcb_c = c()
    # hcb_t = c()
    mkrDensity = c()

    testSizes = seq(1, 0.30, by = -0.1) # simulation fractions vector

    for(frac in testSizes) {#testSizes each 10%+
        # hcb_cl = c()
        # hcb_cr = c()
        # hcb_tl = c()
        # hcb_tr = c()

    testChromosome = refChromosome
    print(c("Test for : frac =", frac, "  ---------------------------------"))
    testChromosome = dplyr::sample_frac(refChromosome, frac)
    testChromosome = testChromosome[order(testChromosome$mb),]  #sort by ascendaing mb which is always true (logically)

        # simu1List = rlist::list.append(simu1List, testChromosome)
        # chi2 = chisq.test(refChromosomeAsMatrix, p = testChromosome, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1
        # simu1ListOfPvals = c(simu1ListOfPvals, chi2$p.value)

        # gg2 = ggplot(data = testChromosome, mapping = aes(x=mb, y=cm)) + geom_point()
        # ggsave(filename = paste0("chr_",chrID, "_SimuChr-NbrMrks=", frac*100, "percent_original_cleaned_chromosome.png"), plot = gg2, path = plots_path,
        #        width = 3.5, height = 3, units = "in", dpi = 300)

        # cleaning step----------------------------------------------------------------
        testChromosome = clean_chromosome_data(testChromosome, genomeName = "Dmel_R5", chrID) #=> 2L original = 110
        print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

        sizechr2 = testChromosome$mb[nrow(testChromosome)]

        # run BREC to get new HCB ------------------------------------------------------
        RR_object = estimate_recombination_rates(testChromosome)
        print("RR done")

        RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.15)
        print("RR done")

        minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
        print(" get minRR done !")
        # print(minRR_object)

        # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object, RR_object) # to prevent asking the user to decide (experimenting with Dmel)
        chrType_object = data.frame(chr_type = 1, chr_sub_type = "Atelocentric")
        chrType = chrType_object$chr_type
        # print(chrType_object)

        R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
        print("R2 done")

        # if(using_slidingWindowApproach_for_HCB) {
        print("Extracting CB for this chromosome ...")
        heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
        print("extract centroCB done")
        telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
        print("extract telo CB done")
        RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
        print("extrapolation done")

        # hcb_cl = c(hcb_cl, heteroChromatinBoundaries$heteroBoundLeft)
        # hcb_cr = c(hcb_cr, heteroChromatinBoundaries$heteroBoundRight)
        # hcb_tl = c(hcb_tl, telomeres_boundaries$extrapolPhysPos_left)
        # hcb_tr = c(hcb_tr, telomeres_boundaries$extrapolPhysPos_right)

        hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
        hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)

        # # RR_plot_100pc = plot_all(testChromosome, RR_object, genomeName ="DmelR6_DQC1_SimuDmelR6Chr2_100pc", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, telomeres_boundaries, plots_path, chrType_object)
        #
        # # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
        # # print(RR_plot_100pc)


        print(c("frac = ", frac, "n = ", nrow(testChromosome)))
        mkrDensity =  round(nrow(testChromosome) / sizechr2, 2)

        # deca_c = abs(deca_c - c)
        # deca_t = abs(deca_t - t)

        # plotting ----
        gg_fig14 <- ggplot(testChromosome, aes(x=mb, y = cm)) + geom_point(size=0.5, color="black") +#Genetic markers

        geom_vline(xintercept = ref_c, linetype="solid", size=1, color="blue") +  # , color = "Reference"  aes(linetype=variable)+
        geom_vline(xintercept = ref_t, linetype="solid", size=1 , color="blue") + #aes(linetype=variable)
        geom_vline(xintercept = heteroChromatinBoundaries$heteroBoundLeft, linetype="dashed", size=1, color ="red") + # , color= "BREC_centromeric"
        geom_vline(xintercept = telomeres_boundaries$telo_left, linetype="dashed", size=1 , color="grey40") + #color = "BREC_telomeric")

        geom_vline(xintercept = ref_c2, linetype="solid", size=1, color="blue") +  # , color = "Reference"  aes(linetype=variable)+
        geom_vline(xintercept = ref_t2, linetype="solid", size=1 , color="blue") + #aes(linetype=variable)
        geom_vline(xintercept = heteroChromatinBoundaries$heteroBoundRight, linetype="dashed", size=1, color ="red") + # , color= "BREC_centromeric"
        geom_vline(xintercept = telomeres_boundaries$telo_right, linetype="dashed", size=1 , color="grey40") + #color = "BREC_telomeric")
        labs(x = "Physical distance (Mb)", y = "Genetic distance (cM)")
    gg_fig14

    highlight_rect_centro_14 <- data.frame(xmin=heteroChromatinBoundaries$heteroBoundLeft, xmax=heteroChromatinBoundaries$heteroBoundRight, ymin=-Inf, ymax=Inf)
    gg_fig14 <- gg_fig14 + geom_rect(data=highlight_rect_centro_14, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
              fill="coral1",
              alpha=0.3,
              inherit.aes = FALSE)

    highlight_rect_telo_14 <- data.frame(xmin=0, xmax=telomeres_boundaries$telo_left, ymin=-Inf, ymax=Inf)
    gg_fig14 <- gg_fig14 + geom_rect(data=highlight_rect_telo_14, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
              fill="grey40",
              alpha=0.3,
              inherit.aes = FALSE)
    highlight_rect_telo2_14 <- data.frame(xmin=telomeres_boundaries$telo_right,xmax=sizechr2, ymin=-Inf, ymax=Inf)
    gg_fig14 <- gg_fig14 + geom_rect(data=highlight_rect_telo2_14, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
              fill="grey40",
              alpha=0.3,
              inherit.aes = FALSE)

    gg_fig14 <- gg_fig14 + theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold")
              # , legend.box.margin = margin(r = 2, l = 1, unit='cm')
              ,axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))
        # scale_x_continuous(breaks=seq(0,24,2)) +
        # scale_y_continuous(breaks=seq(0,20,2))
    # ,"\n", deca_c, "\n", deca_t

    gg_fig14 =  gg_fig14 + annotate("label", x = 10, y = 90, label = paste("fraction = ",frac*100, "%\n", "density = ",mkrDensity, "mkr/Mb" ), size = 3, fill = "white")+
      theme_bw()  # Black and white theme

    gg_fig14

    ggsave(filename = paste0("chr_",chrID ,"_frac_", frac*100,"_density_fig14_with_cleaning_MBE.png"), plot = gg_fig14, path = plots_path, #device = "pdf",
            width = 20, height = 30, units = "cm", dpi = 300)
    #---------

        fig14_gg_per_fraction_list = rlist::list.append(fig14_gg_per_fraction_list, gg_fig14)

    }

    # densityList = rlist::list.append(densityList, mkrDensity )

    # fractions = testSizes*100  #[1:10]
    # # res = data.frame(fractions, telo_left = decatl, centro_left = decacl, centro_right = decacr, telo_right = decatr)
    # res = data.frame(fractions, Telomeric = deca_t, Centromeric = deca_c) #, Chromosome = chrID)
    # d <- melt(res, id="fractions")
    # d_list_for_all_chr = rlist::list.append(d_list_for_all_chr, d)

# names(d_list_for_all_chr) <- "2L"#chrList
# d_list_for_all_chr$X
tictoc::toc()

# plotting in the same figure all chromosomes from d_list_for_all_chr
    # gg2L <- ggplot(d_list_for_all_chr$`2L`, aes(x=fractions, y = value, color=variable )) +
    #    geom_line(aes(), size=1) + #aes(linetype=variable)
    #     geom_point(aes(), size=4) +
    #     # scale_linetype_manual(values = c(2,1)) +
    #     # scale_shape_manual(values= c(15)) +
    #     labs(x = "Fractions (%)", y = "Shift (Mb)",  color = "Chromatin boundary") +
    #     theme(legend.position = "none",
    #     axis.text.x = element_text(size=14), axis.text.y = element_text(size=14) )+
    #     scale_x_continuous(breaks=seq(30,100,10)) +
    #     scale_y_continuous(breaks=seq(0,20,1))
    # gg2L
    # ggsave(filename = paste0("chr_2L",  "_SimuResuts.png"), plot = gg2L, path = plots_path,
    #         width = 3.5, height = 3, units = "in", dpi = 300)

    fig14_gg_100 = fig14_gg_per_fraction_list[[1]]
    fig14_gg_90 = fig14_gg_per_fraction_list[[2]]
    fig14_gg_80 = fig14_gg_per_fraction_list[[3]]
    fig14_gg_70 = fig14_gg_per_fraction_list[[4]]
    fig14_gg_60 = fig14_gg_per_fraction_list[[5]]
    fig14_gg_50 = fig14_gg_per_fraction_list[[6]]
    fig14_gg_40 = fig14_gg_per_fraction_list[[7]]
    fig14_gg_30 = fig14_gg_per_fraction_list[[8]]
    #
    # all_in_one_gg_fig13 = ggarrange(fig13_gg_100,fig13_gg_90,  nrow = 2, ncol = 2, hjust = -17, vjust = 3, labels = paste(c(testSizes[1:2]*100), "%"),
    #                                 ggarrange(fig13_gg_80, fig13_gg_70, fig13_gg_60,
    #                                           fig13_gg_50, fig13_gg_40, fig13_gg_30,
    #                                           nrow = 2 , ncol = 3# hjust = -13, vjust = 3
    #                   ,labels = paste(c(testSizes[-2]*100), "%"), hjust = -7, vjust = 3)
    #                   ,common.legend = T
    # )
    #
    # all_in_one_gg_fig13

    # fig13_gg_100 = fig13_gg_per_fraction_list[[1]] + theme(legend.position = "none")
    # fig13_gg_90 = fig13_gg_per_fraction_list[[2]] + theme(legend.position = "none")
    # fig13_gg_80 = fig13_gg_per_fraction_list[[3]] + theme(legend.position="none")
    # fig13_gg_70 = fig13_gg_per_fraction_list[[4]] + theme(legend.position="none")
    # fig13_gg_60 = fig13_gg_per_fraction_list[[5]] + theme(legend.position="none")
    # fig13_gg_50 = fig13_gg_per_fraction_list[[6]] + theme(legend.position="none")
    # fig13_gg_40 = fig13_gg_per_fraction_list[[7]] + theme(legend.position="none")
    # fig13_gg_30 = fig13_gg_per_fraction_list[[8]]

    all_in_one_gg_fig14 =  (fig14_gg_100 + fig14_gg_90) / (fig14_gg_80 +fig14_gg_70) / (fig14_gg_60 +fig14_gg_50) / (fig14_gg_40 + fig14_gg_30) +
    # + # + plot_spacer()
    plot_layout(guides = 'collect')

   # all_in_one_gg_fig13 =  fig13_gg_100 + fig13_gg_90 + fig13_gg_80 +fig13_gg_70 + fig13_gg_60 +fig13_gg_50 + fig13_gg_40 + fig13_gg_30  + guide_area() +
   #  # + # + plot_spacer()
   #  plot_layout(guides = 'collect')

   all_in_one_gg_fig14

    ggsave(filename = paste0("all_in_one_fig14_new_with_cleaning_MBE.png"), plot = all_in_one_gg_fig14, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)

    # --- other ways to plot all in one --------------------------------------------------
    # ggarrange(ggX,gg2L,gg2R,gg3L, gg3R , nrow = 3, ncol = 2
    #                   ,labels = c("X","2L", "2R", "3L", "3R"), hjust = -15, vjust = 3
    #                  # ,common.legend = T
    # )


    #  (fig13_gg_100 + fig13_gg_90  + guide_area()) / (fig13_gg_80 + fig13_gg_70 + fig13_gg_60) / (fig13_gg_50 + fig13_gg_40 + fig13_gg_30) +
    # # + # + plot_spacer()
    # plot_layout(guides = 'collect')
    # , labels = paste(c(testSizes*100), "%"), hjust = -7, vjust = 3) #+
         # plot_layout(ncol = 1)


    #--------------------------------------------------------------------------------------

@

\subsection{Distribution}
<<echo=F>>=
# DQC 2 - Simulate uniform distribution

    distriSimuList = list()
    fig15_gg_distribution_simu_list = list()


    ## R5_assign ref cyto boundaries for chr 2L in process ==> here for plot only
    chrID = "2"

    ref_c = 19.954780
    ref_t = 0.698949
    ref_c2 = 6.090470 + 22.87981 # 2R
    ref_t2 = 20.020890 + 22.87981

    print(c("=========== chr in process ====> ", chrID, "==================="))
    refChromosome_2L = get_chromosome_from_inputData(inputData, "2L")
    refChromosome_2R = get_chromosome_from_inputData(inputData, "2R")

    # from transform_inputData_to_chromosomes() ---------------------------------------
    lenghtOfFirstArm = 22.87981 # size(2L_R5)
    RightArm = refChromosome_2R
    LeftArm = refChromosome_2L
    # refChromosome = transform_2arms_to_chromosome(firstArm, secondArm, lenghtOfFirstArm) # merge both arms into one chr : remember coord normalisation

    RightArm$mb = RightArm$mb + lenghtOfFirstArm
    chromosome = rbind(LeftArm, RightArm)
    chromosome$chr = "2" # extract the chr number from it's string name

    refChromosome = chromosome
    refChromosomeSize = nrow(refChromosome)

    print(c("refChromosomeSize",nrow(refChromosome)))

    # cleaning step
    # refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR5", chrID) #=> chr2 : 240 instead of 267

    # run BREC to get new HCB
    # RR_object = estimate_recombination_rates(testChromosome)
    MB = refChromosome$mb
    cM = refChromosome$cm
    MB = as.numeric(MB)

    # regression function = Loess using 2nd degree polynomial
    model = loess(cM ~ MB, span = 0.30, degree = 2)#, na.action = na.exclude

    # case 1 ===== simulation case : uniform distribution with centromeric gap ---------------------------------
    case = 1
    newMB_withGap = seq(0.015, by = 0.21, length.out = (refChromosomeSize+24)) #old ver  (refChromosomeSize+25) to remove 25
    newMB_withGap = newMB_withGap[newMB_withGap <= 22 | newMB_withGap >=27]
    print(newMB_withGap)
    regFn_withGap = predict(model, data.frame(newMB_withGap))
    # regFn_withGap[regFn_withGap<0] = 0
    print(regFn_withGap)

    testChromosome = data.frame(mb = newMB_withGap, cm = regFn_withGap)
    distriSimuList = rlist::list.append(distriSimuList, testChromosome)

    # case 2 ===== simulation case : uniform distribution with no centromeric gap ------------------------------
    case = 2
    newMB_noGap = seq(0.015, by = 0.21, length.out = refChromosomeSize) # 211 markers, starting at 0.015Mb, ending at 44.115Mb
    print(newMB_noGap)
    regFn_noGap = predict(model, data.frame(newMB_noGap))
    # regFn_noGap[regFn_noGap<0] = 0
    print(regFn_noGap)

    testChromosome = data.frame(mb = newMB_noGap, cm = regFn_noGap)
    distriSimuList = rlist::list.append(distriSimuList, testChromosome)

    # Simulate NON-uniform distributions ----------------------------------------------------------
    # case 3 ===== simulation non-uniform case with centromeric gap and high density on HCB borders
    case = 3

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.112 # 50 mkr/mb on region of 5 mb => den = 5/50
    loDen = 0.55 # 20 mkr/mb on region of 10 mb => den = 10/20

    r1 = seq(from = 0.112, by = hiDen, to = 5) # 50mk/region
    r2 = seq(from = 5.112, by = loDen, to = 16) # 20mk/mb
    r3 = seq(from = 16.112, by = hiDen, to = 21) # 50mk/mb
    r4 = c() # (21, 28) 0mk/mb => centromeric gap
    r5 = seq(from = 27.912, by = hiDen, to = 32.9) # 50mk/mb
    r6 = seq(from = 33, by = loDen, to = 43) # 20mk/mb
    r7 = seq(from = 43.112, by = hiDen, to = 47.45) # 50mk/mb

    newMB_high_withGap = c(r1, r2, r3, r4, r5, r6, r7)

    # +++++test to get size 44 starting at 0.015Mb and playing with density ++++++++++++++++
    # hiDen = 0.112 # 36 mrkr/region on region of 4 mb => den = 4/36
    # loDen = 0.5 # 22 mrkr/region on region of 11 mb => den = 11/22
    #
    # r1 = seq(from = 0.015, by = hiDen, to = 4)  # 36 mrkr/region of 4Mb
    # r2 = seq(from = 4.015, by = loDen, to = 17) # 26 mrkr/region of 13Mb
    # r3 = seq(from = 17.015, by = hiDen, to = 21)# 36 mrkr/region of 4Mb
    # r4 = c()                                    # (21, 28) 0mrkr/region => centromeric gap
    # r5 = seq(from = 27, by = hiDen, to = 31)    # 36 mrkr/region of 4Mb
    # r6 = seq(from = 31.015, by = loDen, to = 40)# 18 mrkr/region of 9Mb
    # r7 = seq(from = 40.015, by = hiDen, to = 44)# 36 mrkr/region of 4Mb
    #
    # newMB_high_withGap = c(r1, r2, r3, r4, r5, r6, r7)
    # newMB_high_withGap
    # length(newMB_high_withGap)
    # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    regFn_high_withGap = predict(model, data.frame(newMB_high_withGap))
    # regFn_high_withGap[regFn_high_withGap<0] = 0
    plot(newMB_high_withGap, regFn_high_withGap)

    testChromosome = data.frame(mb = newMB_high_withGap, cm = regFn_high_withGap)
    distriSimuList = rlist::list.append(distriSimuList, testChromosome)

    # case 4 ===== simulation non-uniform case WITHOUT centromeric gap and WITH high density on HCB borders--
    case = 4

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.14 #  40mkr/mb on region of 5 mb => den =5/40
    loDen = 0.5 #  20mkr/mb on region of 10 mb => den =10/20

    r1 = seq(from = 0.015, by = hiDen, to = 5)
    r2 = seq(from = 5.015, by = loDen, to = 16)
    r3 = seq(from = 16.015, by = hiDen, to = 21)
    r4 = seq(from = 21.015, by = hiDen, to = 27.9) # NO centromeric gap
    r5 = seq(from = 27.9, by = hiDen, to = 32.9)
    r6 = seq(from = 33, by = loDen, to = 42.5)
    r7 = seq(from = 42.55, by = hiDen, to = 44)

    newMB_high_noGap = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_high_noGap)
    regFn_high_noGap = predict(model, data.frame(newMB_high_noGap))
    # regFn[regFn_high_noGap<0] = 0

    testChromosome = data.frame(mb = newMB_high_noGap, cm = regFn_high_noGap)
    distriSimuList = rlist::list.append(distriSimuList, testChromosome)

    # case 5 ==== simulation non-uniform case with centromeric gap and inversed densities : low on hCB borders
    case = 5

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.112 # 100 mkr/mb on region of 10 mb => den = 10/100
    loDen = 0.55 # 10 mkr/mb on region of 5 mb => den = 5/10

    r1 = seq(from = 0, by = loDen, to = 5) # 10mk/mb
    r2 = seq(from = 5.112, by = hiDen+0.01, to = 16) # 1000mk/mb
    r3 = seq(from = 16.112, by = loDen, to = 21.55) # 10mk/mb
    r4 = c() # (21, 27.8) 0mk/mb => centromeric gap
    r5 = seq(from = 27.912, by = loDen, to = 32.7) # 10mk/mb
    r6 = seq(from = 32.812, by = hiDen+0.01, to = 42.812) # 100mk/mb
    r7 = seq(from = 42.912, by = loDen, to = 48) # 10mk/mb

    newMB_low_withGap = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_low_withGap)
    regFn_low_withGap = predict(model, data.frame(newMB_low_withGap))
    # regFn_low_withGap[regFn_low_withGap<0] = 0

    testChromosome = data.frame(mb = newMB_low_withGap, cm = regFn_low_withGap)
    distriSimuList = rlist::list.append(distriSimuList, testChromosome)

    # case 6 ==== simulation non-uniform case WITHOUT centromeric gap and WITH inversed densities : low on hCB borders
    case = 6

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.125 #  80mkr/mb on region of 10 mb => den =10/80
    loDen = 0.55 #  16mkr/mb on region of 5 mb => den =5/16

    r1 = seq(from = 0.125, by = loDen, to = 4.5)
    r2 = seq(from = 4.525, by = hiDen+0.0125, to = 16)
    r3 = seq(from = 16.125, by = loDen, to = 21)
    r4 = seq(from = 21.125, by = loDen+0.125, to = 28) # NO centromeric gap
    r5 = seq(from = 27.925, by = loDen, to = 32.8)
    r6 = seq(from = 33.125, by = hiDen, to = 43)
    r7 = seq(from = 43.125, by = loDen, to = 48.5)

    newMB_low_noGap = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_low_noGap)
    regFn_low_noGap = predict(model, data.frame(newMB_low_noGap))
    # regFn[regFn_low_noGap<0] = 0

    testChromosome = data.frame(mb = newMB_low_noGap, cm = regFn_low_noGap)
    distriSimuList = rlist::list.append(distriSimuList, testChromosome)

    # hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
    names(distriSimuList) <-c("case1_uniWithGap", "case2_uniNoGap", "case3_highWithGap", "case4_highNoGap", "case5_lowWithGap","case6_lowNoGap")

    # annotationLabel = c("(1)", "(2)", "(3)", "(4)", "(5)", "(6)")
    annotationLabel = c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)")
    annotationDistr = c("uniform", "uniform", "high density", "high density", "low density", "low density")
    annotationGap = c("with gap", "no gap", "with gap", "no gap", "with gap", "no gap")


    for (i in c(1:length(distriSimuList))) {

        testChromosome = distriSimuList[[i]]
        sizechr2 = testChromosome$mb[nrow(testChromosome)]

        # cleaning step----------------------------------------------------------------
        # testChromosome = clean_chromosome_data(testChromosome, genomeName = "Dmel_R5", chrID)
        # print(c("refChromosome after cleaning --> size = ", refChromosomeSize))
        #
        # sizechr2 = testChromosome$mb[nrow(testChromosome)]

        # run BREC to get new HCB ---------------------------------------------
        # RR_object = estimate_recombination_rates(testChromosome)
        # print("RR done")

        RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.3)
        print("RR done")

        minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
        print(" get minRR done !")
        # print(minRR_object)

        # chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object, RR_object) # to prevent asking the user to decide (experimenting with Dmel)
        chrType_object = data.frame(chr_type = 1, chr_sub_type = "Atelocentric")
        chrType = chrType_object$chr_type
        # print(chrType_object)

        R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
        print("R2 done")

        # if(using_slidingWindowApproach_for_HCB) {
        print("Extracting CB for this chromosome ...")
        heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
        print("extract centroCB done")
        telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
        print("extract telo CB done")
        RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
        print("extrapolation done")

        # -------------- used for tempo results  => span used found to be 0.3 => retest with 0.15 (tested, ....)
        # if(i %in% c(5,6)){ #case
        #   telomeres_boundaries$telo_right = 45
        # }
        # ----------------
        # hcb_cl = c(hcb_cl, heteroChromatinBoundaries$heteroBoundLeft)
        # hcb_cr = c(hcb_cr, heteroChromatinBoundaries$heteroBoundRight)
        # hcb_tl = c(hcb_tl, telomeres_boundaries$extrapolPhysPos_left)
        # hcb_tr = c(hcb_tr, telomeres_boundaries$extrapolPhysPos_right)

        hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
        hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)

        # # RR_plot_100pc = plot_all(testChromosome, RR_object, genomeName ="DmelR6_DQC1_SimuDmelR6Chr2_100pc", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, telomeres_boundaries, plots_path, chrType_object)
        #
        # # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
        # # print(RR_plot_100pc)

        # deca_c = abs(deca_c - c)
        # deca_t = abs(deca_t - t)

        # plotting -------------------------------------------------------------------------------------------------
        gg_fig15 <- ggplot(testChromosome, aes(x=mb, y = cm)) + geom_point(size=0.2, color="black") + geom_rug(alpha = 0.7, sides = "b", length = unit(0.05, "npc")) + scale_y_continuous(expand = c(0.1, 0.1)) +    #Genetic markers

        geom_vline(xintercept = c(ref_c,ref_t), linetype="solid", size=1, color="blue") +  # , color = "Reference"  aes(linetype=variable)+
        geom_vline(xintercept = heteroChromatinBoundaries$heteroBoundLeft, linetype="dashed", size=1, color ="red") + # , color= "BREC_centromeric"
        geom_vline(xintercept = telomeres_boundaries$telo_left, linetype="dashed", size=1 , color="grey40") + #color = "BREC_telomeric")

        geom_vline(xintercept = c(ref_c2,ref_t2), linetype="solid", size=1, color="blue") +  # , color = "Reference"  aes(linetype=variable)+
        geom_vline(xintercept = heteroChromatinBoundaries$heteroBoundRight, linetype="dashed", size=1, color ="red") + # , color= "BREC_centromeric"
        geom_vline(xintercept = telomeres_boundaries$telo_right, linetype="dashed", size=1 , color="grey40") + #color = "BREC_telomeric")
        labs(x = "Physical distance (Mb)", y = "Genetic distance (cM)")
        gg_fig15

        # +++ rect BREC results
        highlight_rect_centro_15 <- data.frame(xmin=heteroChromatinBoundaries$heteroBoundLeft, xmax=heteroChromatinBoundaries$heteroBoundRight, ymin=35, ymax=75)
        gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_centro_15, aes(xmin=xmin, xmax=xmax, ymin=-Inf, ymax=Inf),
                  fill="coral1", alpha=0.3, inherit.aes = FALSE)

        highlight_rect_telo_15 <- data.frame(xmin=0, xmax=telomeres_boundaries$telo_left, ymin=-Inf, ymax=Inf)
        gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_telo_15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
                  fill="grey40", alpha=0.3, inherit.aes = FALSE)  #darkorchid
        highlight_rect_telo2_15 <- data.frame(xmin=telomeres_boundaries$telo_right, xmax=sizechr2, ymin=-Inf, ymax=Inf)
        gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_telo2_15, aes(xmin=xmin, xmax=xmax, ymin=-Inf, ymax=Inf),
                   fill="grey40", alpha=0.3, inherit.aes = FALSE)

        # +++ rect BREC results === version to use with along rect ref ================
        # highlight_rect_centro_15 <- data.frame(xmin=heteroChromatinBoundaries$heteroBoundLeft, xmax=heteroChromatinBoundaries$heteroBoundRight, ymin=35, ymax=75)
        # gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_centro_15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
        #           color = "red", linetype = "dashed",  fill="coral1", alpha=0.5, inherit.aes = FALSE)
        #
        # highlight_rect_telo_15 <- data.frame(xmin=0, xmax=telomeres_boundaries$telo_left, ymin=-15, ymax=15)
        # gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_telo_15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
        #           color = "grey40", linetype = "dashed", fill="grey40", alpha=0.5, inherit.aes = FALSE)  #darkorchid
        # highlight_rect_telo2_15 <- data.frame(xmin=telomeres_boundaries$telo_right, xmax=sizechr2, ymin=95, ymax=125)
        # gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_telo2_15, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
        #            color = "grey40", linetype = "dashed", fill="grey40", alpha=0.5, inherit.aes = FALSE)
        # +++ rect Ref cyto
        # highlight_rect_centro_15_ref <- data.frame(xmin=ref_c, xmax=ref_c2, ymin=40, ymax=70)
        # gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_centro_15_ref, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
        #           color = "blue", linetype = "solid", fill="blue", alpha=0.3, inherit.aes = FALSE)
        #
        # highlight_rect_telo_15_ref <- data.frame(xmin=0, xmax=ref_t, ymin=-10, ymax=10)
        # gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_telo_15_ref, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
        #           color = "blue", linetype = "solid", fill="blue", alpha=0.3, inherit.aes = FALSE)
        # highlight_rect_telo2_15_ref <- data.frame(xmin=ref_t2, xmax=sizechr2, ymin=100, ymax=120)
        # gg_fig15 <- gg_fig15 + geom_rect(data=highlight_rect_telo2_15_ref, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
        #            color = "blue", linetype = "solid", fill="blue", alpha=0.3, inherit.aes = FALSE)


        gg_fig15 <- gg_fig15 + theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold")
                  , legend.box.margin = margin(r = 2, l = 1, unit='cm')
                  ,axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))+
            # scale_x_continuous(breaks=seq(0,24,2)) +
            # scale_y_continuous(breaks=seq(0,20,2))
        # ,"\n", deca_c, "\n", deca_t

        annotate("label", x = 10, y = 100, label = paste(annotationLabel[i], "\n", annotationGap[i], "\n", annotationDistr[i] ), size = 4, fill = "white")+
        scale_fill_manual('Heterochromatin regions', values = c("coral1, grey40, blue"),  guide = guide_legend(override.aes = list(alpha = 1))) +
        theme_bw() # balck and white theme

        # gg_fig15
        #
        # ggsave(filename = paste0("chr_2simu_distribution_fig15_with_cleaning", chr2simu,".png"), plot = gg_fig15, path = plots_path, #device = "pdf",
        #         width = 20, height = 30, units = "cm", dpi = 300)
        #---------

      fig15_gg_distribution_simu_list = rlist::list.append(fig15_gg_distribution_simu_list, gg_fig15)
  }


tictoc::toc()

# plotting in the same figure all chromosomes from d_list_for_all_chr

    fig15_gg_uniWithGap = fig15_gg_distribution_simu_list[[1]]
    fig15_gg_uniNoGap = fig15_gg_distribution_simu_list[[2]]
    fig15_gg_highWithGap = fig15_gg_distribution_simu_list[[3]]
    fig15_gg_highNoGap = fig15_gg_distribution_simu_list[[4]]
    fig15_gg_lowWithGap = fig15_gg_distribution_simu_list[[5]]
    fig15_gg_lowNoGap = fig15_gg_distribution_simu_list[[6]]


    all_in_one_gg_fig15 =  (fig15_gg_uniWithGap + fig15_gg_uniNoGap) / (fig15_gg_highWithGap + fig15_gg_highNoGap) / (fig15_gg_lowWithGap + fig15_gg_lowNoGap)
    plot_layout(guides = 'collect')

    all_in_one_gg_fig15

    ggsave(filename = paste0("all_in_one_fig15_MBE.png"), plot = all_in_one_gg_fig15, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)

@

\subsection{DQC - 1Mb-bins local density variations on Dmel R5 arms}
<<echo=F>>=
    local_density_List = list()
    fig11_gg_local_density_list = list()

    # Compute local density => bins per 1Mb + plot
    chrSize = data.frame("chrX" = 22, "chr2L" = 23, "chr2R" = 22, "chr3L" = 22, "chr3R" = 28) # R5 CLEAN(Anna)

    for(chrID in newChrList){ # in this order => "X"  "2L" "2R" "3L" "3R"

        if(chrID == "X"){
            binsMax = chrSize$chrX
        }else if(chrID == "2L"){
            binsMax = chrSize$chr2L
        }else if(chrID == "2R"){
            binsMax = chrSize$chr2R
        }else if(chrID == "3L"){
            binsMax = chrSize$chr3L
        }else if(chrID == "3R"){
            binsMax = chrSize$chr3R
        }

        bins = seq(1, binsMax, by = 1)

        # bins = bins*10^6  # use in case of bp

        localDensity = c()
        # for (chrID in chrList) {

            refChromosome = get_chromosome_from_inputData(inputData, chrID)
            print(c("refChromosomeSize",nrow(refChromosome)))
            # cleaning step
            # refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR6", chrID) #=> chr2 : 240 instead of 267
            refChromosomeSize = nrow(refChromosome)
            # print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

            localDensity = c()
            for (b in bins) {
                s = dplyr::filter(refChromosome, refChromosome$mb <= b)
                localDensity = c(localDensity, nrow(s))
                refChromosome = dplyr::anti_join(refChromosome, s) ## delete s from refChromosome
            }
            result_local_density = data.frame( bins, localDensity) #"Physical_positions_(MB)" =  #"Markers_local_density"=
            print(result_local_density)

            # gg_bins = ggplot(data = result_local_density, mapping = aes(x=bins, y=localDensity)) + geom_line()+ geom_label(aes(label = localDensity), size = 7) +
            #     geom_hline(yintercept= mean(result_local_density$localDensity), linetype="dashed", color = "red", size = 1.5)# + geom_path(size = 0.8)
            # gg_bins
            # ggsave(filename = paste0("chr_",chrID, "_densityPer_", b,"Mb.png"), plot = gg_bins, path = plots_path) #plot = last_plot()

            gg_bins <- ggplot(result_local_density, aes(x=bins, y=localDensity)) +
            geom_line(aes()) + #, size=1) + #aes(linetype=variable)
            geom_label(aes(label = localDensity), size = 3) +
            geom_hline(yintercept= mean(result_local_density$localDensity), linetype="dashed", color = "red")  +# size = 1.5)+ geom_path(size = 0.8)
            # geom_text(mapping=aes(x=0, y= round(mean(result_local_density$localDensity), 2),color = "red", size=5, vjust=-13, hjust=0) +
            # scale_linetype_manual(values = c(2,1)) +
            # scale_shape_manual(values= c(15)) +
            labs(x = "Physical distance bins (Mb)", y = "Local density (marker/Mb)") +
            annotate("text", x = 6, y = max(result_local_density$localDensity)-0.3, label = chrID, size = 4)+
            annotate("text", x = 12, y = max(result_local_density$localDensity)-0.3, label = paste0("mean = ", round(mean(result_local_density$localDensity), 2)), size = 4, color="red")+
              theme_bw()
            # theme(legend.text=element_text(size = 12), legend.title=element_text(size = 14, face = "bold"), legend.box.margin = margin(r = 2, l = 1, unit='cm'),
                  # axis.text.x = element_text(size=14), axis.text.y = element_text(size=14))
            # scale_x_continuous(limits = c(0, 30), breaks=seq(0,30,2)) +
            # scale_y_continuous(limits = c(0, 25),breaks=seq(0,25,5))
            # gg_bins
            #
            # ggsave(filename = paste0("chr",chrID , "_localDensity_variation.png"), plot = gg_bins, path = plots_path, #device = "pdf",
            #         width = 3.5, height = 3, units = "cm", dpi = 300)

# -------------- normalized distribution : removing extreme values -------------------------------------------------------------------------------
            # result_local_density_normalized = dplyr::filter(result_local_density, (localDensity != 0 & localDensity < 10))
            #
            # gg_bins = ggplot(data = result_local_density_normalized, mapping = aes(x=bins, y=localDensity)) + geom_line()+ geom_label(aes(label = localDensity), size = 7) +
            #             geom_hline(yintercept= mean(result_local_density_normalized$localDensity), linetype="dashed", color = "red", size = 1.5) #+ geom_path(size = 1.5)
            # ggsave(filename = paste0("chr_",chrID, "_densityPer_", b,"Mb_normalized.png"), plot = gg_bins, path = plots_path) #plot = last_plot()
            # gg_bins
# --------------------------------------------------------------------------------------------------------------------------------------------------
            local_density_List = rlist::list.append(local_density_List, result_local_density)
            fig11_gg_local_density_list = rlist::list.append(fig11_gg_local_density_list, gg_bins)
    }
    names(local_density_List) = newChrList
    names(fig11_gg_local_density_list) = newChrList

    # plotting in the same figure all chromosomes from d_list_for_all_chr

    gg_bins_X = fig11_gg_local_density_list$'X'
    gg_bins_2L = fig11_gg_local_density_list$'2L'
    gg_bins_2R = fig11_gg_local_density_list$'2R'
    gg_bins_3L = fig11_gg_local_density_list$'3L'
    gg_bins_3R = fig11_gg_local_density_list$'3R'


    all_in_one_gg_bins_fig11 =  (gg_bins_X + plot_spacer()) / (gg_bins_2L + gg_bins_2R) / (gg_bins_3L + gg_bins_3R)
    plot_layout(guides = 'collect')

    all_in_one_gg_bins_fig11

    ggsave(filename = paste0("all_in_one_gg_bins_fig11_MBE.png"), plot = all_in_one_gg_bins_fig11, path = plots_path, #device = "pdf",
            width = 20, height = 25, units = "cm", dpi = 300)

@






\end{document}


