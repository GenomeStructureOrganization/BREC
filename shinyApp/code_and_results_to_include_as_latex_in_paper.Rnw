\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

%code_and_results_to_include_in_latex_paper
<<>>=
library(Brec)
library(plotly)
library(ggplot2)
library(reshape2)
library(shiny)
library(na.tools)
library(tidyverse)
library(xtable)

plots_path =  paste0(getwd(),"/../DQC/")

## === Read data and build whole chromosomes from arms

# load inputs data
# inputData = read.csv(file = "data/Dmel_R6_formatted_v2.csv", header = T, sep = "\t")
inputData = read.csv(file = "../data/BREC_byArm_MB_marey_map_R5.36_removeOutliers.csv", header = T, sep = "\t")
chrList = get_list_of_chromosomes(inputData)
newChrList = c("X", "2L", "2R", "3L", "3R")
@

<<>>=
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
xtab <- xtable(head(inputData))
print(xtab)
@

\section{Validation}



\subsection{Chromatin boundaries validation plot(ly)s}
<<>>=

@


<<>>=

@

\section{Validation of recombination rates with the high resolution map from FlyBase}

<<>>=
# Load and prepare Langley data (with plotting the content)
langleyData <- read.csv(file = "../datasets/Langley_TableS12.txt", skip= 3, sep="\t", header=TRUE)
    print(head(langleyData))

    langleyData_X = langleyData[ , c(1:4)]
    langleyData_2L = langleyData[ , c(6:9)]
    langleyData_2R = langleyData[ , c(11:14)]
    langleyData_3L = langleyData[ , c(16:19)]
    langleyData_3R = langleyData[ , c(21:24)]

    newChrList = c("X", "2L", "2R", "3L", "3R")
    for (chrID in newChrList) {

        # chrID = "3R"
        if(chrID == "X"){
            langleyData = langleyData_X
        }else if(chrID == "2L"){
            langleyData = langleyData_2L
        }else if(chrID == "2R"){
            langleyData = langleyData_2R
        }else if(chrID == "3L"){
            langleyData = langleyData_3L
        }else if(chrID == "3R"){
            langleyData = langleyData_3R
        }

        names(langleyData)[c(1:4)] = c("Cytogenetic", "cM", "end", "M.bp")

        # ------------------plotting with ggplot ==> second y axis issues ==> solved with plotly -------------
        # p = ggplot(langleyData, aes(x = end/10^6)) + geom_point(aes( y = cM, color = "Genetic markers"))
        #
        # # adding regression line
        # p = p + geom_line(aes(y = M.bp*10^9, color = "Recombination rate"))
        #
        # # now adding the secondary axis, following the example in the help file ?scale_y_continuous
        # # and, very important, reverting the above transformation
        # ymin = min(langleyData$cM, langleyData$M.bp*10^9, na.rm = T)
        # ymax = max(langleyData$cM, langleyData$M.bp*10^9, na.rm = T)
        # p = p + scale_y_continuous(sec.axis = sec_axis(~./10 , name = "Recombination rate (cM/Mb)"))#, limits = c(-1, 8))
        #
        # # modifying colours and theme options
        # p = p + scale_colour_manual(values = c("black", "red"))
        # p = p + labs(y = "Genetic distance (cM)",
        #               x = "Physical location (Mb)",
        #               colour = paste(chrID, " - Langley data"))
        # p = p + theme(legend.position = c(0.2, 0.9))
        # print(p)
        # ggsave(filename = paste0("chr_",chrID,"_Langley_", ".png") #
        #        , plot = p
        #        , path = plots_path #plot = last_plot()
        #        , height = 8
        #        , width = 12
        # )

        # ------------------plotting with plotly ----------------------------------------------------------------

         pLangley = plot_ly(data = langleyData, x = ~end/10^6, y= ~cM,
                  type = 'scatter', mode = 'markers',
                  yaxis = "y", name = "genetic markers"
                  # hoverinfo = text,
                  # text = ~paste('Mb:', x, "\ncM:",y)
                  ) %>%  # plot dataSet
            add_trace(data = langleyData, x= ~end/10^6, y = ~M.bp*10^8,  #polynomial
                      type = "scatter", mode = "lines",
                      yaxis = "y2", name = "RR estimates",
                      line = list(color = "red"))  %>%

             layout(title = paste("Chromosome", chrID),
                   xaxis = list(
                     showline = TRUE
                     ,title = paste( "Physical location (Mb)" )
                     ,titlefont = list(size= 20)
                     ,color = "#0072B2"
                     ,zeroline = FALSE
                     ,showgrid = FALSE
                     ,exponentformat = "power"
                     ,tickwidth = 3
                     ,tickcolor = "#0072B2"
                     ,showticklabels = TRUE
                     ,tickfont = list(size = 18)
                   )
                   ,yaxis = list(  # the data points axis is invisible since it matches the one of the polynomial
                       showline = TRUE
                       ,side = "left"
                       ,title = "Genetic location (cM)"
                       ,titlefont = list(size= 20)
                       ,color = "#0072B2"
                       ,zeroline = FALSE
                       ,showgrid = FALSE
                       ,exponenformat = "power"
                       ,tickwidth = 3
                       ,tickcolor = "#0072B2"
                       ,showticklabels = TRUE
                       ,tickfont = list(size = 18)
                   )
                   ,yaxis2 = list(
                       showline = TRUE
                     ,side = "right"
                     ,overlaying = "y"
                     ,title = "Recombination rate (cM/Mb)"
                     ,titlefont = list(size= 20)
                     ,color = "red" #2CA02C"
                     ,zeroline = FALSE
                     ,anchor = "y"
                     ,showgrid = FALSE
                     ,exponentformat = "power"
                     ,tickwidth = 3
                     ,showticklabels = TRUE
                     ,tickfont = list(size = 18)
                   )
         )
         print(pLangley)


    }
@


\section{DQC}
\subsection{Density}

<<>>=
densityList= list()
for (chrID in chrList) {

    ## R5_assign ref cyto boundaries according to chr in process
    if(chrID == "2L"){
        c = 19.954780
        t = 0.698949
    }else if(chrID == "2R"){
        c = 6.090470
        t = 20.020890
    }else if(chrID == "3L"){
        c = 18.408033
        t = 0.356604
    }else if(chrID == "3R"){
        c = 8.349278
        t = 27.248244
    }else if(chrID == "X"){
        c =  20.665672
        t =  2.460008
    }
    print(c("=========== chr in process ====> ", chrID, "==================="))
    refChromosome = get_chromosome_from_inputData(inputData, chrID)
    print(c("refChromosomeSize",nrow(refChromosome)))
    # cleaning step
    # refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR5", chrID) #=> chr2 : 240 instead of 267
    refChromosomeSize = nrow(refChromosome)
    print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

    #prepare refchr for DQC
    # refChromosomeAsMatrix = as.matrix.data.frame(subset(refChromosome, select=c("cm", "mb")), rownames.force = NA)

    # print(c("frac = ", frac, "n = ", nrow(testChromosome)))
    # ------------- simu1List : number of markers per chromosome ---------------------------------
    # enoughData = FALSE
    # simu1List = list()  # simulated chromosomes baesd on number of markers
    # simu1ListOfPvals = c()

  tictoc::tic()

    testChromosome = refChromosome
    # decacl = c() # centro_left decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    # decacr = c() # centro_right
    # decatl = c() # telo_left
    # decatr = c() # telo_right

    deca_c = c() # centro decalage_of_Brec_estimated_HCB_compared_To_ref_cyto_HCB
    deca_t = c() # telo

    mkrDensity = c()
    densityFD = data.frame()

    testSizes = seq(1, 0.30, by = -0.05) # simulation fractions vector

    for(frac in testSizes) {#testSizes each 5%
        # hcb_cl = c()
        # hcb_cr = c()
        # hcb_tl = c()
        # hcb_tr = c()

        hcb_c = c()
        hcb_t = c()

        if (frac != 1) { ## not the case of 100%
            for (i in c(1:30)) {
                print(c("Test for : frac =", frac," No ", i, "  ---------------------------------"))
                testChromosome = dplyr::sample_frac(refChromosome, frac)
                testChromosome = testChromosome[order(testChromosome$mb),]  #sort by ascendaing mb which is always true (logically)

                # simu1List = rlist::list.append(simu1List, testChromosome)
                # chi2 = chisq.test(refChromosomeAsMatrix, p = testChromosome, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1
                # simu1ListOfPvals = c(simu1ListOfPvals, chi2$p.value)

                gg1 = ggplot(data = testChromosome, mapping = aes(x=mb, y=cm)) + geom_point()
                ggsave(filename = paste0("chr_",chrID, "_SimuChr-NbrMrks=", frac*100, "percent_testNo_",i,".png"), plot = gg1, path = plots_path) #plot = last_plot()

                # run BREC to get new HCB
                RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.15)
                print("RR done")

                minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
                print(" get minRR done !")
                print(minRR_object)

                chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object, RR_object)
                chrType = chrType_object$chr_type
                print(chrType_object)

                R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
                print("R2 done")

                # if(using_slidingWindowApproach_for_HCB) {
                print("Extracting CB for this chromosome ...")
                heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
                print("extract centroCB done")
                telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
                print("extract telo CB done")
                RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
                print("extrapolation done")

            #     hcb_cl = c(hcb_cl, heteroChromatinBoundaries$heteroBoundLeft)
            #     hcb_cr = c(hcb_cr, heteroChromatinBoundaries$heteroBoundRight)
            #     hcb_tl = c(hcb_tl, telomeres_boundaries$extrapolPhysPos_left)
            #     hcb_tr = c(hcb_tr, telomeres_boundaries$extrapolPhysPos_right)

                hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
                hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)
            }

        }else{ ## case of  100% --> run only once not 30 times since it's the same
            print("Test for : original_cleaned_chromosome ---------------------------------")
            # simu1List = rlist::list.append(simu1List, testChromosome)
            # chi2 = chisq.test(refChromosomeAsMatrix, p = testChromosome, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1
            # simu1ListOfPvals = c(simu1ListOfPvals, chi2$p.value)

            gg2 = ggplot(data = testChromosome, mapping = aes(x=mb, y=cm)) + geom_point()
            ggsave(filename = paste0("chr_",chrID, "_SimuChr-NbrMrks=", frac*100, "percent_original_cleaned_chromosome.png"), plot = gg2, path = plots_path)

            # run BREC to get new HCB
            RR_object = estimate_recombination_rates(testChromosome)
            print("RR done")

            RR_object = estimate_recombination_rates_loess(testChromosome, spanVal = 0.15)
            print("RR done")

            minRR_object = get_min_RR_value_based_on_polynomial(testChromosome)
            print(" get minRR done !")
            print(minRR_object)

            chrType_object = get_chromosome_type(testChromosome, chrID, minRR_object, RR_object)
            chrType = chrType_object$chr_type
            print(chrType_object)

            R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
            print("R2 done")

            # if(using_slidingWindowApproach_for_HCB) {
            print("Extracting CB for this chromosome ...")
            heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType, minRR_object)
            print("extract centroCB done")
            telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType, minRR_object)
            print("extract telo CB done")
            RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType, minRR_object)
            print("extrapolation done")

            # hcb_cl = c(hcb_cl, heteroChromatinBoundaries$heteroBoundLeft)
            # hcb_cr = c(hcb_cr, heteroChromatinBoundaries$heteroBoundRight)
            # hcb_tl = c(hcb_tl, telomeres_boundaries$extrapolPhysPos_left)
            # hcb_tr = c(hcb_tr, telomeres_boundaries$extrapolPhysPos_right)

            hcb_c = c(hcb_c, heteroChromatinBoundaries$heteroBoundArm)
            hcb_t = c(hcb_t, telomeres_boundaries$telo_arm)

            RR_plot_100pc = plot_all(testChromosome, RR_object, genomeName ="DmelR6_DQC1_SimuDmelR6Chr2_100pc", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, telomeres_boundaries, plots_path, chrType)

            # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
            print(RR_plot_100pc)
        }

        print(c("frac = ", frac, "n = ", nrow(testChromosome)))
        mkrDensity = c(mkrDensity, nrow(testChromosome))

        # mhcb_cl = mean(abs(cl - hcb_cl))
        # mhcb_cr = mean(abs(cr - hcb_cr))
        # mhcb_tl = mean(abs(tl - hcb_tl))
        # mhcb_tr = mean(abs(tr - hcb_tr))
        #
        # decacl = c(decacl, mhcb_cl)
        # decacr = c(decacr, mhcb_cr)
        # decatl = c(decatl, mhcb_tl)
        # decatr = c(decatr, mhcb_tr)

        mhcb_c = mean(abs(c - hcb_c))
        mhcb_t = mean(abs(t - hcb_t))

        deca_c = c(deca_c, mhcb_c)
        deca_t = c(deca_t, mhcb_t)

    }

    mkrDensity
    densityList = rlist::list.append(densityList, mkrDensity )

    fractions = testSizes*100  #[1:10]
    # res = data.frame(fractions, telo_left = decatl, centro_left = decacl, centro_right = decacr, telo_right = decatr)
    res = data.frame(fractions, telo = deca_t, centro = deca_c)
    d <- melt(res, id="fractions")

    gg3 = ggplot(d, aes(x=fractions, y = value, color=variable)) +
        geom_line(aes(linetype=variable), size=1) +
        geom_point(aes(shape=variable, size=4)) +
        scale_linetype_manual(values = c(2,1,1,2)) +
        scale_shape_manual(values= c(15,17,17,15))
    ggsave(filename = paste0("chr_",chrID,  "_SimuResuts_1.png"), plot = gg3, path = plots_path)

tictoc::toc()
}
    RR_plot_smallest_chr = plot_all(testChromosome, RR_object, genomeName ="dmel", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, telomeres_boundaries, plots_path, chrType)
    print(RR_plot_smallest_chr)
@

\subsection{Distribution}
<<>>=
# DQC 2 - Simulate uniform distribution
    chrSize = data.frame("chrX" = 24, "chr2" = 49, "chr3" = 60) # CLEAN
    chrID = "2"

    if(chrID == "X"){
        binsMax = chrSize$chrX
    }else if(chrID == "2"){
        binsMax = chrSize$chr2
    }else if(chrID == "3"){
        binsMax = chrSize$chr3
    }

    refChromosome = get_chromosome_from_inputData(inputData, chrID)
    print(c("refChromosomeSize",nrow(refChromosome)))
    # cleaning step
    refChromosome = clean_chromosome_data(refChromosome, genomeName = "DmelR6", chrID) #=> chr2 : 240 instead of 267
    refChromosomeSize = nrow(refChromosome)
    print(c("refChromosome after cleaning --> size = ", refChromosomeSize))

    # run BREC to get new HCB
    # RR_object = estimate_recombination_rates(testChromosome)
    MB = refChromosome$mb
    cM = refChromosome$cm
    MB = as.numeric(MB)
    model = glm(cM ~ poly(MB, 3, raw = T)) #---- Fitting Linear Models
    print(model)


    # simulation case without cenrromeric gap
    newMB_noGap = seq(0.015, by = 0.2, length.out = refChromosomeSize )
    print(newMB_noGap)
    regFn = predict(model, data.frame(newMB_noGap))
    regFn[regFn<0] = 0
    print(regFn)
    newMB = newMB_noGap

    # simulation case with centromeric gap
    newMB_withGap = seq(0.015, by = 0.2, length.out = refChromosomeSize+25)
    newMB_withGap = newMB_withGap[newMB_withGap <= 22 | newMB_withGap >=27]
    print(newMB_withGap)
    regFn = predict(model, data.frame(newMB_withGap))
    # regFn[regFn<0] = 0
    print(regFn)
    newMB = newMB_withGap

    print(newMB_withGap)
    length(newMB_withGap)
    regFn = predict(model, data.frame(newMB_withGap))
    # regFn[regFn<0] = 0
    print(regFn)
    newMB = newMB_withGap


    uniform_distribution = data.frame(newMB, regFn) #"Physical_positions_(MB)" =  #"Markers_local_density"=
    print(uniform_distribution)

    gg_uniDist = ggplot(data = uniform_distribution, mapping = aes(x=newMB, y=regFn)) + geom_point()
    ggsave(filename = paste0("chr_",chrID, "_uniform_distribution_.png"), plot = gg_uniDist, path = plots_path) #plot = last_plot()
    gg_uniDist

    testChromosome = data.frame(mb = uniform_distribution$newMB, cm = uniform_distribution$regFn)
@

<<>>=
# TESING BREC ON UNIFORM DISTRIBUTION SIMULATIONS
  ## assign ref cyto boundaries according to chr in process
    if(chrID == "2"){# --------- for chr 2 dmel6
        # refHCB_centro = cyto_R6
        cl = 17.400000 # old : 21.17693
        cr = 32.826207 # old : 26.22948
        # refHCB_telo = Brec_chr100%
        tl = 0.5
        tr = 48.426189
    }else if(chrID == "3"){# --------- for chr 3 dmel6
        # refHCB_centro = cyto_R6
        cl = 19.906900
        cr = 41.984505
        # refHCB_telo = Brec_chr100%
        tl = 0.7
        tr = 59.184505
    }else if(chrID == "X"){ # --------- for chr X dmel6
        # refHCB_centro = cyto_R6
        cr = 20.928973
        # refHCB_telo = Brec_chr100%
        tl = 2.405967
    }

    # run BREC to get new HCB
    RR_object = estimate_recombination_rates(testChromosome)
    print("RR done")
    chrType = get_chromosome_type(testChromosome, RR_object$regDr)
    R2DataFrame2D = compute_cumulated_R_squared_2directions(testChromosome)
    print("R2 done")

    # if(using_slidingWindowApproach_for_HCB) {
    print("Extracting CB for this chromosome ...")
    heteroChromatinBoundaries = extract_CB(testChromosome, RR_object, R2DataFrame2D, chrID, chrType)
    print("extract centroCB done")
    telomeres_boundaries = extract_telomeres_boundaries(testChromosome, R2DataFrame2D, chrID, chrType)
    print("extract telo CB done")
    RR_object = extrapolate_RR_estimates(testChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType)
    print("extrapolation done")

    hcb_cl = abs(cl - heteroChromatinBoundaries$heteroBoundLeft)
    hcb_cr = abs(cr - heteroChromatinBoundaries$heteroBoundRight)
    hcb_tl = abs(tl - telomeres_boundaries$extrapolPhysPos_left)
    hcb_tr = abs(tr - telomeres_boundaries$extrapolPhysPos_right)

    hcb_res_uniDistr = c(hcb_cl, hcb_cr, hcb_tl, hcb_tr)

    # gg_uniDist = ggplot(data = hcb_res_uniDistr, mapping = aes(x=newMB, y=regFn)) + geom_point()
    # ggsave(filename = paste0("chr_",chrID,  "_SimuDQC2_uniDistr.png"), plot = gg3, path = plots_path)


    RR_plot_uniDist = plot_all(testChromosome, RR_object, genomeName ="DmelR6_DQC2_Simu_uniformDistribution", toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize,  telomeres_boundaries, plots_path, chrType)
    # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
    print(RR_plot_uniDist)

# ****************************************************************************************************
    goodDataDistribution = FALSE
    testChromosomeAsMatrix = as.matrix.data.frame(subset(testChromosome, select=c("cm", "mb")), rownames.force = NA)
    refChromosomeAsMatrix = as.matrix.data.frame(subset(refChromosome, select=c("cm", "mb")), rownames.force = NA)

    # n = nrow(testChromosome) # number of data needed to generate the mvnormal distribution
    # mu = c(50, 50) # vector of means
    # Sigma <- matrix(c(10,6,6,16),2,2) # matrix of 2*2
    # normalDistribution = MASS::mvrnorm(n, mu, Sigma) # multivariate normal distribution

    chi2 = chisq.test(refChromosomeAsMatrix, p =  testChromosomeAsMatrix, simulate.p.value = TRUE, rescale.p = TRUE) # to rescale p to sum up to 1

    chi2 = nortest::pearson.test(testChromosome$cm) # to rescale p to sum up to 1
    print(chi2)
    chi2Pvalue = chi2$p.value
    print(chi2Pvalue)
    if(chi2Pvalue > 0.05){
        goodDataDistribution = TRUE
        print("OK! Good data distribution !")
    }else{
        print("Oups! Not a good data distribution !")
    }

@

<<>>=
# TESING BREC ON NON-UNIFORM DISTRIBUTION SIMULATIONS
    # run BREC to get new HCB
    RR_object = estimate_recombination_rates(newtestChromosome)
    print("RR done")
    chrType = get_chromosome_type(newtestChromosome, RR_object$regDr)
    R2DataFrame2D = compute_cumulated_R_squared_2directions(newtestChromosome)
    print("R2 done")

    # if(using_slidingWindowApproach_for_HCB) {
    print("Extracting CB for this chromosome ...")
    heteroChromatinBoundaries = extract_CB(newtestChromosome, RR_object, R2DataFrame2D, chrID, chrType)
    print("extract centroCB done")
    telomeres_boundaries = extract_telomeres_boundaries(newtestChromosome, R2DataFrame2D, chrID, chrType)
    print("extract telo CB done")
    RR_object = extrapolate_RR_estimates(newtestChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType)
    print("extrapolation done")


    RR_plot_uniDist = plot_all(newtestChromosome, RR_object, genomeName =paste0("DmelR6_DQC2_Simu_non_uniformDistribution_simu_",i, "_"), toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize,  telomeres_boundaries, plots_path, chrType)
    # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
    print(RR_plot_uniDist)

@

<<>>=
# DQC 2 - Simulate NON-uniform distributions
    # case 1 ===== simulation non-uniform case with centromeric gap and high density on HCB borders
    case = 1

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.1 # 50 mkr/mb on region of 5 mb => den = 5/50
    loDen = 0.55 # 20 mkr/mb on region of 10 mb => den = 10/20

    r1 = seq(from = 0.1, by = hiDen, to = 5) # 50mk/mb
    r2 = seq(from = 5.1, by = loDen, to = 16) # 20mk/mb
    r3 = seq(from = 16.1, by = hiDen, to = 21) # 50mk/mb
    r4 = c() # (21, 28) 0mk/mb => centromeric gap
    r5 = seq(from = 27.9, by = hiDen, to = 32.9) # 50mk/mb
    r6 = seq(from = 33, by = loDen, to = 43) # 20mk/mb
    r7 = seq(from = 43.1, by = hiDen, to = 48) # 50mk/mb

    newMB_withGap_nonUni = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_withGap_nonUni)
    newMB = newMB_withGap_nonUni

    # case 2 ==== simulation non-uniform case with centromeric gap and inversed densities : low on hCB borders
    case = 2

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.1 # 100 mkr/mb on region of 10 mb => den = 10/100
    loDen = 0.5 # 10 mkr/mb on region of 5 mb => den = 5/10

    r1 = seq(from = 0.1, by = loDen, to = 5) # 10mk/mb
    r2 = seq(from = 5.1, by = hiDen+0.01, to = 16) # 1000mk/mb
    r3 = seq(from = 16.1, by = loDen, to = 21) # 10mk/mb
    r4 = c() # (21, 27.8) 0mk/mb => centromeric gap
    r5 = seq(from = 27.9, by = loDen, to = 32.8) # 10mk/mb
    r6 = seq(from = 32.9, by = hiDen, to = 42.8) # 100mk/mb
    r7 = seq(from = 42.9, by = loDen, to = 47.8) # 10mk/mb

    newMB_withGap_nonUni = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_withGap_nonUni)
    newMB = newMB_withGap_nonUni

    # -----------------------------------------------------------------------------------------------
    # case 3 ===== simulation non-uniform case WITHOUT centromeric gap and WITH high density on HCB borders
    case = 3

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.125 #  40mkr/mb on region of 5 mb => den =5/40
    loDen = 0.5 #  20mkr/mb on region of 10 mb => den =10/20

    r1 = seq(from = 0.1, by = hiDen, to = 5)
    r2 = seq(from = 5.1, by = loDen+0.05, to = 16)
    r3 = seq(from = 16.1, by = hiDen, to = 21)
    r4 = seq(from = 21.1, by = hiDen+0.05, to = 28) # NO centromeric gap
    r5 = seq(from = 27.9, by = hiDen, to = 32.9)
    r6 = seq(from = 33, by = loDen, to = 42.5)
    r7 = seq(from = 42.8, by = hiDen, to = 47.6)

    newMB_noGap_nonUni = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_noGap_nonUni)
    newMB = newMB_noGap_nonUni

    # case 4 ==== simulation non-uniform case WITHOUT centromeric gap and WITH inversed densities : low on hCB borders
    case = 4

    # the 2 following values identify the step used in seq()
    # according to the wanted density
    hiDen = 0.125 #  80mkr/mb on region of 10 mb => den =10/80
    loDen = 0.3125 #  16mkr/mb on region of 5 mb => den =5/16

    r1 = seq(from = 0.1, by = loDen, to = 5)
    r2 = seq(from = 5.1, by = hiDen+0.0125, to = 16)
    r3 = seq(from = 16.1, by = loDen, to = 21)
    r4 = seq(from = 21.1, by = loDen+0.125, to = 28) # NO centromeric gap
    r5 = seq(from = 27.9, by = loDen, to = 32.8)
    r6 = seq(from = 33.1, by = hiDen, to = 43)
    r7 = seq(from = 43.1, by = loDen, to = 48)

    newMB_noGap_nonUni = c(r1, r2, r3, r4, r5, r6, r7)

    length(newMB_noGap_nonUni)
    newMB = newMB_noGap_nonUni

    # hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

    regFn = predict(model, data.frame(newMB))
    # regFn[regFn<0] = 0
    print(regFn)



    nonUniform_distribution = data.frame(newMB, regFn) #"Physical_positions_(MB)" =  #"Markers_local_density"=
    print(nonUniform_distribution)

    gg_nonUniDist = ggplot(data = nonUniform_distribution, mapping = aes(x=newMB, y=regFn)) + geom_point()
    ggsave(filename = paste0("chr_",chrID, "_non_uniform_distribution_case_", case, "_.png"), plot = gg_uniDist, path = plots_path) #plot = last_plot()
    gg_nonUniDist

    newtestChromosome = data.frame(mb = nonUniform_distribution$newMB, cm = nonUniform_distribution$regFn)

@

<<>>=
# TESING BREC ON NON-UNIFORM DISTRIBUTION SIMULATIONS
    # run BREC to get new HCB
    RR_object = estimate_recombination_rates(newtestChromosome)
    print("RR done")
    chrType = get_chromosome_type(newtestChromosome, RR_object$regDr)
    R2DataFrame2D = compute_cumulated_R_squared_2directions(newtestChromosome)
    print("R2 done")

    # if(using_slidingWindowApproach_for_HCB) {
    print("Extracting CB for this chromosome ...")
    heteroChromatinBoundaries = extract_CB(newtestChromosome, RR_object, R2DataFrame2D, chrID, chrType)
    print("extract centroCB done")
    telomeres_boundaries = extract_telomeres_boundaries(newtestChromosome, R2DataFrame2D, chrID, chrType)
    print("extract telo CB done")
    RR_object = extrapolate_RR_estimates(newtestChromosome, RR_object, heteroChromatinBoundaries, telomeres_boundaries, chrID, chrType)
    print("extrapolation done")


    RR_plot_non_uniDist = plot_all(newtestChromosome, RR_object, genomeName =paste0("DQC2_Simu_non_uniform_distribution_case_", case, "_"), toString(chrID), R2DataFrame2D, heteroChromatinBoundaries, heteroChromatinBoundaries$swSize, plots_path)
    # save_plot_as_png(RR_plot_100pc, plots_path, genomeName = "DmelR6", chrID)
    print(RR_plot_non_uniDist)
@


\end{document}
